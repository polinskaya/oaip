hash.cpp
#include "stdafx.h"
#include "Hash.h"
#include <iostream>
#include <time.h>

using namespace std;

int HashFunctionMulti(int key, int size, int p)    //’еш-функци€
{
	double key2 = 1000000007 * ((0.6180339887499 * key) - int((0.6180339887499 * key)));
	return (p + int(key2)) % size;
}

int HashFunctionModule(int key, int size, int p)    //’еш-функци€
{
	return ((p + key) % 1000000007) % size;
}
//-------------------------------
int Next_hash(int hash, int size, int p)
{
	return (hash + 5 * p + 3 * p * p) % size;
}
//-------------------------------
Object create(int size, int(*getkey)(void*))
{
	return *(new Object(size, getkey));
}
//-------------------------------
Object::Object(int size, int(*getkey)(void*))
{
	N = 0;
	this->size = size;
	this->getKey = getkey;
	this->data = new void*[size]; //выдел€етс€ пам€ть под массив 
	for (int i = 0; i < size; ++i)
		data[i] = NULL;
}
//-------------------------------
bool Object::insert(void* d)
{
	bool b = false;
	if (N != size) // N кол-во данных которые есть, size кол-во допустимых
		for (int i = 0, t = getKey(d), j = HashFunctionMulti(t, size, 0);
			i != size && !b;  j = Next_hash(j, size, ++i))
			if (data[j] == NULL || data[j] == DEL) // находим €чеку, куда можно "впихнуть"
			{
				data[j] = d;
				N++;                //увеличение кол-ва объектов
				b = true;
			}
	return b;
}
//-------------------------------
int Object::searchIndModule(int key)
{
	clock_t time; // представл€ет число тиков времени с момента начала выполнени€ программы
	time = clock();
	int t = -1;
	bool b = false;
	if (N != 0)
		for (int i = 0, j = HashFunctionModule(key, size, 0); data[j] != NULL && i != size && !b; j = HashFunctionModule(key, size, ++i))
			if (data[j] != DEL)
				if (getKey(data[j]) == key)
				{
					t = j; b = true;
				}
	time = clock() - time;
	cout << "¬рем€ работы модульного хешировани€: " << time << endl;
	return t;
}

int Object::searchIndMulti(int key)
{
	clock_t time;
	time = clock();
	int t = -1;
	bool b = false;
	if (N != 0)
		for (int i = 0, j = HashFunctionMulti(key, size, 0); data[j] != NULL && i != size && !b; j = HashFunctionMulti(key, size, ++i))
			if (data[j] != DEL)
				if (getKey(data[j]) == key)
				{
					t = j; b = true;
				}
	time = clock() - time;
	cout << "¬рем€ работы мультипликативного хешировани€: " << time << endl;
	return t;
}
//-------------------------------
void* Object::search(int key)
{
	int t = searchIndModule(key);
	t = searchIndMulti(key);
	return(t >= 0) ? (data[t]) : (NULL);
}
//-------------------------------
void* Object::deleteByKey(int key)
{
	int i = searchIndMulti(key);
	void* t = data[i];
	if (t != NULL)
	{
		data[i] = DEL;
		N--;
	}
	return t;
}
//-------------------------------
bool Object::deleteByValue(void* d)
{
	return(deleteByKey(getKey(d)) != NULL);
}
//-------------------------------
void Object::scan(void(*f)(void*))
{
	for (int i = 0; i < this->size; i++)
	{
		std::cout << " Ёлемент" << i;
		if ((this->data)[i] == NULL)
			std::cout << "  пусто" << std::endl;
		else
			if ((this->data)[i] == DEL)
				std::cout << "  удален" << std::endl;
			else
				f((this->data)[i]);
	}
}
Hash.h
#pragma once
#define HASHDEL (void*) -1
struct Object
{
	void** data;
	Object(int, int(*)(void*));
	int size;  int N;
	int(*getKey)(void*);
	bool insert(void*);
	int searchIndModule(int key);
	int searchIndMulti(int key);
	void* search(int key);
	void* deleteByKey(int key);
	bool deleteByValue(void*);
	void scan(void(*f)(void*));
};
static void* DEL = (void*)HASHDEL;
Object create(int size, int(*getkey)(void*));
#undef HASHDEL
14 лаба.cpp
#include "stdafx.h"
#include "Hash.h"
#include <iostream>
#include<Windows.h>
using namespace std;
struct AAA
{
	int key;
	const char *mas;
	AAA(int k, const char*z)
	{
		key = k;  mas = z;
	};
	AAA() {};
};
//-------------------------------
int key(void* d)
{
	AAA* f = (AAA*)d;   return f->key;
}
//-------------------------------
void AAA_print(void* d)
{
	cout << " ключ " << ((AAA*)d)->key << " - " << ((AAA*)d)->mas << endl;
}
//-------------------------------
int _tmain(int argc, _TCHAR* argv[])
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	AAA a1(1, "one"), a2(2, "two"), a3(4, "three"), a4(2, "fo");
	int siz = 10, choice, k;
	cout << "¬ведите размер хеш-таблицы" << endl; 	cin >> siz;
	Object H = create(siz, key);
	for (;;)
	{
		cout << "1 - вывод хеш-таблицы" << endl;
		cout << "2 - добавление элемента" << endl;
		cout << "3 - удаление элемента" << endl;
		cout << "4 - поиск элемента" << endl;
		cout << "0 - выход" << endl;
		cout << "сделайте выбор" << endl;   cin >> choice;
		switch (choice)
		{
		case 1: H.scan(AAA_print);  break;
		case 2: { AAA *a = new AAA;
			char *str = new char[20];
			cout << "введите ключ" << endl;	cin >> k;
			a->key = k;
			cout << "введите строку" << endl; cin >> str;
			a->mas = str;
			if (H.N == H.size)
				cout << "“аблица заполнена" << endl;
			else
				H.insert(a);
		} break;
		case 3: {  cout << "введите ключ дл€ удалени€" << endl;
			cin >> k;
			H.deleteByKey(k);
		}  break;
		case 4: {  cout << "введите ключ дл€ поиска" << endl;
			cin >> k;
			if (H.search(k) == NULL)
				cout << "Ёлемент не найден" << endl;
			else
				AAA_print(H.search(k));
		}  break;
		}
	}
	return 0;
}