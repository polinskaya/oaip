<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="Лекция%202_3.files/filelist.xml">
<link rel=Edit-Time-Data href="Лекция%202_3.files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Лекция 2-3</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Owner</o:Author>
  <o:LastAuthor>Owner</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:Created>2009-02-10T19:24:00Z</o:Created>
  <o:LastSaved>2009-02-10T19:27:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>8472</o:Words>
  <o:Characters>48292</o:Characters>
  <o:Company>ISIT</o:Company>
  <o:Lines>402</o:Lines>
  <o:Paragraphs>113</o:Paragraphs>
  <o:CharactersWithSpaces>56651</o:CharactersWithSpaces>
  <o:Version>11.5703</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"Courier New CYR";
	panose-1:2 7 3 9 2 2 5 2 4 4;
	mso-font-charset:204;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:"Arial CYR";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:"Times New Roman CYR";
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:204;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:204;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536871559 0 0 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;}
h1
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:16.0pt;
	font-family:Arial;
	color:windowtext;
	mso-font-kerning:16.0pt;
	mso-fareast-language:EN-US;
	font-weight:bold;}
h2
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	color:windowtext;
	mso-fareast-language:EN-US;
	font-weight:bold;
	font-style:italic;}
h3
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:13.5pt;
	font-family:"Times New Roman";
	color:windowtext;
	font-weight:bold;}
h4
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:14.0pt;
	font-family:"Times New Roman";
	color:windowtext;
	font-weight:bold;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	mso-fareast-language:EN-US;
	font-style:italic;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 233.85pt right 467.75pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	mso-fareast-language:EN-US;}
p.MsoBodyTextIndent2, li.MsoBodyTextIndent2, div.MsoBodyTextIndent2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:28.35pt;
	mso-pagination:none;
	tab-stops:.2in .3in .4in 3.4in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	layout-grid-mode:line;}
p.MsoBodyTextIndent3, li.MsoBodyTextIndent3, div.MsoBodyTextIndent3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:24.0pt;
	margin-left:0in;
	text-align:justify;
	text-indent:28.35pt;
	mso-pagination:none;
	tab-stops:.3in .6in .8in .9in 1.1in 1.2in;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	layout-grid-mode:line;}
a:link, span.MsoHyperlink
	{mso-ansi-font-size:13.0pt;
	mso-bidi-font-size:13.0pt;
	color:#0066CC;
	mso-text-animation:none;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	line-height:150%;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;}
p
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
tt
	{font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
p.title1, li.title1, div.title1
	{mso-style-name:title_1;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:18.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.textbold, li.textbold, div.textbold
	{mso-style-name:text_bold;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-weight:bold;}
p.2, li.2, div.2
	{mso-style-name:"заголовок 2";
	mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	text-autospace:none;
	font-size:12.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	mso-fareast-language:EN-US;
	font-weight:bold;
	font-style:italic;}
p.3, li.3, div.3
	{mso-style-name:"заголовок 3";
	mso-style-next:Обычный;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	text-autospace:none;
	font-size:12.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;}
p.a, li.a, div.a
	{mso-style-name:текст;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:.5in;
	mso-pagination:widow-orphan;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;}
p.a0, li.a0, div.a0
	{mso-style-name:программа;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Courier New CYR";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;}
p.a1, li.a1, div.a1
	{mso-style-name:список;
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:18.45pt;
	margin-bottom:0in;
	margin-left:35.45pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	tab-stops:42.55pt;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;}
p.a2, li.a2, div.a2
	{mso-style-name:"без формата";
	mso-style-parent:программа;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Courier New CYR";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;}
span.texample
	{mso-style-name:texample;}
span.keyword
	{mso-style-name:keyword;}
p.a3, li.a3, div.a3
	{mso-style-name:определение;
	mso-style-parent:текст;
	margin-top:12.0pt;
	margin-right:32.9pt;
	margin-bottom:12.0pt;
	margin-left:35.45pt;
	text-align:justify;
	text-indent:.55pt;
	mso-pagination:widow-orphan;
	text-autospace:none;
	border:none;
	mso-border-alt:solid windowtext 1.5pt;
	padding:0in;
	mso-padding-alt:1.0pt 1.0pt 1.0pt 1.0pt;
	font-size:10.0pt;
	font-family:"Arial CYR";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	mso-fareast-language:EN-US;}
p.a4, li.a4, div.a4
	{mso-style-name:"от края";
	mso-style-parent:текст;
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	text-autospace:none;
	font-size:10.0pt;
	font-family:"Times New Roman CYR";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	mso-fareast-language:EN-US;}
p.4, li.4, div.4
	{mso-style-name:"заголовок 4";
	mso-style-next:Обычный;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	mso-fareast-language:EN-US;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	text-decoration:underline;
	text-underline:single;}
p.20, li.20, div.20
	{mso-style-name:Стиль2;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:.5in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	mso-fareast-language:EN-US;}
p.1, li.1, div.1
	{mso-style-name:Обычный1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.25in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	mso-pagination:widow-orphan;
	tab-stops:.25in;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:windowtext;
	mso-fareast-language:EN-US;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:35.95pt 37.3pt 35.95pt .5in;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-even-footer:url("Лекция%202_3.files/header.htm") ef1;
	mso-footer:url("Лекция%202_3.files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:8414988;
	mso-list-type:hybrid;
	mso-list-template-ids:406585616 68747279 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l0:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l1
	{mso-list-id:367342659;
	mso-list-type:hybrid;
	mso-list-template-ids:956610360 -1497095598 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l1:level1
	{mso-level-start-at:7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l2
	{mso-list-id:825362277;
	mso-list-type:hybrid;
	mso-list-template-ids:-1375290594 68747279 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l2:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l3
	{mso-list-id:952859685;
	mso-list-type:hybrid;
	mso-list-template-ids:-912073296 660748916 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l3:level1
	{mso-level-start-at:5;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l4
	{mso-list-id:1590624359;
	mso-list-type:hybrid;
	mso-list-template-ids:1150867834 68747279 68747289 68747291 68747279 68747289 68747291 68747279 68747289 68747291;}
@list l4:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l5
	{mso-list-id:1614555633;
	mso-list-template-ids:1695343216;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l6
	{mso-list-id:1904754062;
	mso-list-template-ids:1246382862;}
@list l6:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l7
	{mso-list-id:1921257105;
	mso-list-template-ids:-1097316642;}
@list l7:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Обычная таблица";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]-->
</head>

<body lang=RU link="#0066CC" vlink=purple style='tab-interval:35.4pt'>

<div class=Section1>

<p align=center style='text-align:center'><span style='font-family:Arial;
mso-no-proof:yes'><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="Рисунок_x0020_10" o:spid="_x0000_i1025" type="#_x0000_t75"
 style='width:19.5pt;height:21pt;visibility:visible;mso-wrap-style:square'>
 <v:imagedata src="Лекция%202_3.files/image001.png" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=26 height=28
src="Лекция%202_3.files/image003.jpg" v:shapes="Рисунок_x0020_10"><![endif]></span><span
style='font-family:Arial'><a href="../index.htm"><span style='mso-ansi-font-size:
12.0pt;mso-bidi-font-size:12.0pt'>Главная</span></a><o:p></o:p></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial;mso-no-proof:yes'><!--mstheme--><img border=0
width=600 height=11 id="_x0000_i1026" src="../_themes/capsules/capsepa.gif"></span><b
style='mso-bidi-font-weight:normal'><span style='font-size:16.0pt'><o:p></o:p></span></b></p>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:16.0pt'>Лекция 2-3<o:p></o:p></span></b></p>

<p class=MsoNormal align=center style='text-align:center;background:white'><b
style='mso-bidi-font-weight:normal'><span style='font-size:16.0pt'>Сортировка и
поиск.<o:p></o:p></span></b></p>

<p class=a><b style='mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></b></p>

<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;margin-left:35.45pt;margin-right:32.9pt'>

<p class=a3 style='margin-top:12.0pt;margin-right:0in;margin-bottom:12.0pt;
margin-left:0in'>КЛЮЧ<span class=GramE> -<span style='font-family:Arial'>-</span>
</span>часть элемента данных, которая используется для его идентификации и
поиска среди множества других таких элементов<span style='mso-tab-count:2'>                       </span><span
style='font-family:"Times New Roman CYR"'><o:p></o:p></span></p>

</div>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt'>ПРОВЕРКА</span><span
style='font-size:10.0pt;mso-ansi-language:EN-US'> </span><span
style='font-size:10.0pt'>УПОРЯДОЧНЕННОСТИ</span><span style='font-size:10.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:10.0pt'>МАССИВА</span><span
lang=EN-US style='font-size:10.0pt;mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>//---- <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>int</span> is_sorted(int
a[], int n){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>for</span> (int i=0;
i&lt;n-1; i++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span><span class=GramE>if</span>
(a[i]&gt;a[i+1]) return 0;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>return</span> 1;}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int
a[]={1,3,3,5,7,9,12,16,23,35};<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>printf(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>&quot;v=%d\n&quot;,is_sorted(a,n));<o:p></o:p></span></p>

<p class=a0>}</p>

<p class=MsoNormal style='text-indent:9.0pt'><b style='mso-bidi-font-weight:
normal'><span style='font-size:10.0pt'>ДВОИЧНЫЙ ПОИСК ЗНАЧЕНИЯ<o:p></o:p></span></b></p>

<p class=a0>//------Двоичный поиск в упорядоченном массиве</p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-tab-count:1'>   </span>binary(int
c[], int n, int val)<o:p></o:p></span></p>

<p class=a0><span class=GramE>{<span style='mso-tab-count:2'>           </span>//
Массив, размерность и искомое значение</span></p>

<p class=a0>int<span style='mso-tab-count:1'>   </span>a,b,m;<span
style='mso-tab-count:3'>                  </span>// Левая, правая границы и</p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'>for(a=0,b=n-1; a
&lt;= b;) <span style='mso-tab-count:1'>     </span>// </span>середина<span
lang=PT-BR style='mso-ansi-language:PT-BR'><o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>      </span></span>{</p>

<p class=a0><span style='mso-tab-count:1'>      </span>m = (a + b)/2;<span
style='mso-tab-count:1'>    </span><span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span>// Середина интервала</p>

<p class=a0><span style='mso-tab-count:1'>      </span>if (c[m] == val)<span
style='mso-tab-count:1'>  </span><span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span>// Значение найдено -</p>

<p class=a0><span style='mso-tab-count:1'>      </span><span
style='mso-spacerun:yes'>   </span>return(m);<span style='mso-tab-count:2'>           </span>//
вернуть индекс</p>

<p class=a0><span style='mso-tab-count:1'>      </span>if (c[m] &gt; val)</p>

<p class=a0><span style='mso-tab-count:2'>            </span>b = m-1;<span
style='mso-tab-count:1'>    </span><span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span>// Выбрать левую половину</p>

<p class=a0><span style='mso-tab-count:1'>      </span>else</p>

<p class=a0><span style='mso-tab-count:2'>            </span>a = m+1;<span
style='mso-tab-count:1'>    </span><span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span>// Выбрать правую половину</p>

<p class=a0><span style='mso-tab-count:1'>      </span>}<span style='mso-tab-count:
7'>                                        </span></p>

<p class=a0>return(-1);<span style='mso-tab-count:3'>             </span><span
style='font-family:"Courier New"'><span style='mso-tab-count:1'>      </span></span>//
Значение не найдено</p>

<p class=a0>}</p>

<p class=a>Оценим количество сравнений, которые необходимо для поиска
требуемого значения, Так как после первого сравнения интервал уменьшается в 2,
после второго -<span style='font-family:"Times New Roman"'> </span>в 4 и т.д.
раз, то количество сравнений будет не больше соответствующей степени 2, дающей
размерность массива -n, или логарифма n по основанию 2:<span
style='mso-spacerun:yes'>  </span></p>

<p class=a0><span style='font-family:"Courier New"'>.</span></p>

<p class=a0><span style='mso-spacerun:yes'> </span><span style='font-family:
"Courier New"'><span style='mso-spacerun:yes'>  </span></span>s</p>

<p class=a0><span style='mso-spacerun:yes'>  </span>2 = n, тогда s = log (n)</p>

<p class=a0><span style='mso-spacerun:yes'>                      </span>2<span
style='font-family:"Courier New"'><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><b style='mso-bidi-font-weight:
normal'><span style='font-size:10.0pt'>ДВОИЧНЫЙ ПОИСК МЕСТА ВСТАВКИ<o:p></o:p></span></b></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//------Двоичный поиск места включения в упорядоченном массиве</p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-tab-count:1'>   </span>find(int
c[], int n, int val)<o:p></o:p></span></p>

<p class=a0><span class=GramE>{<span style='mso-tab-count:2'>           </span>//
Массив, размерность и искомое значение</span></p>

<p class=a0>int<span style='mso-tab-count:1'>   </span>a,b,m;<span
style='mso-tab-count:3'>                  </span>// Левая, правая границы и</p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'>for(a=0,b=n-1; a
&lt; b;) <span style='mso-tab-count:2'>      </span>// </span>середина<span
lang=PT-BR style='mso-ansi-language:PT-BR'><o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>      </span></span>{</p>

<p class=a0><span style='mso-tab-count:1'>      </span>m = (a + b)/2;<span
style='mso-tab-count:1'>    </span><span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span>// Середина интервала</p>

<p class=a0><span style='mso-tab-count:1'>      </span>if (c[m] == val)<span
style='mso-tab-count:1'>  </span><span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span>// Значение найдено -</p>

<p class=a0><span style='mso-tab-count:1'>      </span><span
style='mso-spacerun:yes'>   </span>return(m);<span style='mso-tab-count:2'>           </span>//
вернуть индекс</p>

<p class=a0><span style='mso-tab-count:1'>      </span>if (c[m] &gt; val)</p>

<p class=a0><span style='mso-tab-count:2'>            </span>b = m-1;<span
style='mso-tab-count:1'>    </span><span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span>// Выбрать левую половину</p>

<p class=a0><span style='mso-tab-count:1'>      </span>else</p>

<p class=a0><span style='mso-tab-count:2'>            </span>a = m+1;<span
style='mso-tab-count:1'>    </span><span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>      </span></span>// Выбрать правую половину</p>

<p class=a0><span style='mso-tab-count:1'>      </span><span class=GramE>}<span
style='mso-tab-count:4'>                       </span>// Выход по <span
lang=EN-US style='mso-ansi-language:EN-US'>a</span>==<span lang=EN-US
style='mso-ansi-language:EN-US'>b</span></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>if</span></span>
(<span lang=EN-US style='mso-ansi-language:EN-US'>val</span> &gt; <span
lang=EN-US style='mso-ansi-language:EN-US'>c</span>[<span lang=EN-US
style='mso-ansi-language:EN-US'>a</span>]) <span lang=EN-US style='mso-ansi-language:
EN-US'>return</span><span lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:
EN-US'>a</span>+1;<span style='mso-tab-count:1'>  </span>// Включить на
следующую<span style='mso-tab-count:3'>                 </span></p>

<p class=a0>return a;<span class=GramE> }</span><span style='mso-tab-count:
1'> </span><span style='mso-tab-count:2'>            </span><span
style='font-family:"Courier New"'><span style='mso-tab-count:1'>      </span></span>//
или на текущую позицию</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a><span style='mso-spacerun:yes'> </span>Алгоритмы сортировки можно
классифицировать по нескольким признакам. </p>

<p class=a1><span style='mso-spacerun:yes'> </span><u>Вид сортировки по
размещению элементов</u>: внутренняя <span class=GramE>-в</span> памяти,
внешняя -в файле данных. Методы внутренней сортировки можно разделить на две
группы:&nbsp;&nbsp;&nbsp; - методы, не требующие резерва
памяти;&nbsp;&nbsp;&nbsp; - методы, требующие резерва памяти. К первой группе
относятся такие методы, как метод выборки, &quot;пузырька&quot;, вставки,
Шелла. Ко второй группе относятся метод квадратичной выборки,&nbsp;&nbsp;&nbsp;
метод слияния и другие.</p>

<p class=a1><span style='mso-spacerun:yes'> </span><u>Вид сортировки по виду
структуры данных</u>, содержащей сортируемые элементы: сортировка массивов,
массивов указателей, списков и других структур данных. </p>

<p class=a1><span style='mso-spacerun:yes'> </span><u>Способ выбора элементов</u>:<span
style='mso-spacerun:yes'>  </span></p>

<p class=a1>-ОБМЕННАЯ СОРТИРОВКА (“ПУЗЫРЕК<span class=GramE>”-</span>обменная
сортировка с выбором; ШЕЙКЕР-сортировка ): выполняется путем перестановки
элементов по определенному правилу; </p>

<p class=a1>- СОРТИРОВКА РАЗДЕЛЕНИЕМ (БЫСТРАЯ СОРТИРОВКА РАЗДЕЛЕНИЕМ,
ПОРАЗРЯДНАЯ СОРТИРОВКА РАЗДЕЛЕНИЕМ): основан на разделении эленетов
последовательности на части и сортировки каждой из частей независимо друг от
друга итерационно или рекурсивно;</p>

<p class=a1>-СОРТИРОВКА ПОДСЧЕТОМ: определяется количество элементов, больших
или меньших <span class=GramE>данного</span>;<span style='mso-spacerun:yes'> 
</span></p>

<p class=a1>-СОРТИРОВКА ВЫБОРОМ (ПРЯМАЯ ВЫБОРА, ЛИНЕЙНЫЙ ВЫБОР С ПОДСЧЕТОМ,
КВАДРАТИЧНАЯ СОРТИРОВКА С ВЫБОРОМ): выбирается очередной минимальный элемент и
помещается в конец последовательности; </p>

<p class=a1>-СОРТИРОВКА ВСТАВКАМИ (ПРОСТАЯ ВСТАВКА, ВСТАВКА ПОГРУЖЕНИЕМ,
СОРТИРОВКА ШЕЛЛА): очередной элемент помещается по месту своего расположения в
выходную последовательность (массив);<span style='mso-spacerun:yes'>  </span></p>

<p class=a1>-ПИРАМИДАЛЬНАЯ СОРТИРОВКА: строится пирамида, <span class=GramE>при</span>
сортировки выполняется просеивание пирамиды</p>

<p class=a1>- РАСПРЕДЕЛЯЮЩАЯ СОРТИРОВКА </p>

<p class=a1>-СОРТИРОВКА СЛИЯНИЕМ (ОДНОКРАТНОЕ СЛИЯНИЕ, ЦИКЛИЧЕСКОЕ СЛИЯНИЕ):
последовательность (массив) регулярно распределяется <span class=GramE>в</span>
несколько <span class=GramE>последовательностей</span>, которые затем
объединяются (слияние). </p>

<p class=a style='text-indent:9.0pt'><b style='mso-bidi-font-weight:normal'><span
style='mso-spacerun:yes'> </span>Оценка алгоритмов<o:p></o:p></b></p>

<p class=a>Для алгоритмов сортировки <span class=GramE>важное значение</span>
имеет понятие трудоемкости. <b><span style='font-size:14.0pt;font-family:"Courier New CYR"'><o:p></o:p></span></b></p>

<p class=a>Простые методы сортировки (выбором,&nbsp;&nbsp;&nbsp;&nbsp; обменом,
вставкой) требуют приблизительно n**2 сравнений. Более сложные алгоритмы обычно
обеспечивают получение результата за n*log2(n) сравнений в среднем: сортировка
методом Шелла, слиянием, &quot;быстрая сортировка&quot;. Однако оптимальной в
любом случае сортировки не существует, так как их эффективность существенно
зависит от типа ключей в таблице и их предварительной упорядоченности.<br>
<span style='mso-spacerun:yes'>          </span>На сегодняшний день самые
эффективные методы сортировки: быстрая сортировка, распределяющая сортировка и
быстрая сортировка <span style='mso-spacerun:yes'> </span>с составными ключами,
которая слишком сложна. Для прикладных задач, использующих элементы сортировки
также очень полезна пирамидальная сортировка.</p>

<h3><span style='font-size:10.0pt'>Обменные сортировки <o:p></o:p></span></h3>

<p class=a>Метод получил свое название за то, что &quot;более весомые&quot;
элементы поднимаются в процессе сортировки к концу массива: </p>

<p class=a>Пример: </p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                 </span>B=&lt;20,-5,10,8,7&gt;,<span
style='mso-spacerun:yes'>   </span>исходный список;</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                 </span>B1=&lt;-5,10,8,7,20&gt;,<span
style='mso-spacerun:yes'>  </span>первый просмотр;</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                 </span>B2=&lt;-5,8,7,10,20&gt;,<span
style='mso-spacerun:yes'>  </span>второй просмотр;</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                 </span>B3=&lt;-5,7,8,10,20&gt;,<span
style='mso-spacerun:yes'>  </span>третий просмотр.</p>

<p class=a style='margin-top:0in'><o:p>&nbsp;</o:p></p>

<p class=a0>//------Сортировка методом &quot;пузырька&quot;</p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
style='mso-tab-count:1'>  </span><span lang=EN-US style='mso-ansi-language:
EN-US'>sort</span>(<span lang=EN-US style='mso-ansi-language:EN-US'>int</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>A</span>[],
<span lang=EN-US style='mso-ansi-language:EN-US'>int</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>n</span>)</p>

<p class=a0>{</p>

<p class=a0>int<span style='mso-tab-count:1'>   </span>i,found;<span
style='mso-tab-count:2'>          </span> <span
style='mso-spacerun:yes'> </span><span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>    </span></span>// Количество сравнений</p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>do</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-tab-count:1'>    </span>{<span
style='mso-tab-count:3'>                 </span><span
style='mso-spacerun:yes'>  </span></span><span lang=EN-US style='font-family:
"Courier New";mso-ansi-language:EN-US'><span style='mso-tab-count:1'>    </span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>// </span>Повторять<span
style='mso-ansi-language:EN-US'> </span>просмотр<span lang=EN-US
style='mso-ansi-language:EN-US'>...<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span><span class=GramE>found</span> =0;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span><span class=GramE>for</span> (i=0;
i&lt;n-1; i++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span><span class=GramE>if</span> (A[i] &gt;
A[i+1])<span style='mso-spacerun:yes'>  </span></span><span lang=EN-US
style='font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span></span><span lang=EN-US style='mso-ansi-language:
EN-US'>// </span>Сравнить<span style='mso-ansi-language:EN-US'> </span>соседей<span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>{<span style='mso-tab-count:2'>           </span><span
style='mso-spacerun:yes'>  </span></span><span lang=EN-US style='font-family:
"Courier New";mso-ansi-language:EN-US'><span style='mso-tab-count:1'>    </span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>// </span>Переставить<span
style='mso-ansi-language:EN-US'> </span>соседей<span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span><span class=GramE>int</span><span
style='mso-tab-count:1'>   </span>cc;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span>cc = A[i]; A[i<span class=GramE>]=</span>A[i+1];
A[i+1]=cc;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span><span class=GramE>found</span></span>++;<span
style='mso-tab-count:1'>    </span></p>

<p class=a0><span style='mso-tab-count:2'>            </span>}</p>

<p class=a0><span style='mso-tab-count:1'>      </span>} while(found<span
class=GramE> !</span>=0); <span style='font-family:"Courier New"'><span
style='mso-tab-count:1'>    </span></span>//...пока есть перестановки</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int
a[]={4,7,3,4,8,2,3,6,6,4,9,2,3};<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>sort(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>puts</span>(</span>&quot;&quot;);</p>

<p class=a0>}</p>

<p class=a4 style='text-indent:.25in'>Характеристики сортировки методом
&quot;пузырька&quot; в худшем случае составляют n(n-1)/2 сравнений (среднее
количество сравнений, которое равно <span class=GramE>( </span>n*n -n )/2) и
n(n-1)/2 перестановок (худшим считается случай, когда элементы наиболее удалены
от своих конечных позиций). Среднее число сравнений и перестановок имеет
порядок n**2 .</p>

<p class=a4 style='text-indent:.25in'>Сортировку пузырьковым методом можно
в&nbsp;&nbsp;&nbsp; некоторой степени &nbsp; улучшить и тем самым немного
улучшить ее временные характеристики. Ниже показана улучшенная версия
сортировки пузырьковым методом, получившая название <b style='mso-bidi-font-weight:
normal'><i style='mso-bidi-font-style:normal'>&quot;челночной сортировки&quot;</i></b>
из-за соответствующего характера движений по массиву или <span class=GramE><b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>ШЕЙКЕР-СОРТИРОВКИ</i></b></span>.
&nbsp; Хотя эта сортировка является улучшением пузырьковым методом,&nbsp; ее
нельзя рекомендовать для использования, поскольку время выполнения по-прежнему
зависит квадратично от числа элементов. Число сравнений не изменяется, а число
обменов уменьшается лишь на незначительную величину.</p>

<p class=MsoNormal><b><span style='font-family:"Courier New CYR"'><o:p>&nbsp;</o:p></span></b></p>

<p class=a0>шаг n<span style='mso-spacerun:yes'>                  </span>5<span
style='mso-spacerun:yes'>  </span>7<span style='mso-spacerun:yes'> 
</span>10<span style='mso-spacerun:yes'>  </span>9<span
style='mso-spacerun:yes'>  </span>8<span style='mso-spacerun:yes'> 
</span>12<span style='mso-spacerun:yes'>  </span>14<span
style='mso-spacerun:yes'>  </span></p>

<p class=a0><span style='mso-spacerun:yes'>                       </span>5<span
style='mso-spacerun:yes'>  </span>7<span style='mso-spacerun:yes'> 
</span>*****<span style='mso-spacerun:yes'>  </span>8<span
style='mso-spacerun:yes'>  </span>12<span style='mso-spacerun:yes'>  </span>14</p>

<p class=a0>последняя перестановка 5<span style='mso-spacerun:yes'> 
</span>7<span style='mso-spacerun:yes'>  </span>9<span
style='mso-spacerun:yes'>  </span>*****<span style='mso-spacerun:yes'> 
</span>12<span style='mso-spacerun:yes'>  </span>14</p>

<p class=a0><span style='mso-spacerun:yes'>                       </span>5<span
style='mso-spacerun:yes'>  </span>7<span style='mso-spacerun:yes'> 
</span>9<span style='mso-spacerun:yes'>   </span>8<span
style='mso-spacerun:yes'>  </span>10 12<span style='mso-spacerun:yes'> 
</span>14</p>

<p class=a0>шаг n+1<span style='font-family:"Courier New"'><span
style='mso-spacerun:yes'>                          </span>------------<o:p></o:p></span></p>

<p class=a0><span style='font-family:"Courier New"'><span
style='mso-spacerun:yes'>                          </span></span>упорядоченная<span
style='mso-ansi-language:EN-US'> </span>часть<span lang=EN-US style='mso-ansi-language:
EN-US'><o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='font-size:8.0pt;
mso-ansi-language:EN-US'>void</span></span><span lang=EN-US style='font-size:
8.0pt;mso-ansi-language:EN-US'><span style='mso-tab-count:1'>   </span>Shaker(int
A[], int count)<o:p></o:p></span></p>

<p style='margin:0in;margin-bottom:.0001pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New CYR";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>{ int</span> j, k, l, r, x;<o:p></o:p></span></p>

<p style='margin:0in;margin-bottom:.0001pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New CYR";mso-ansi-language:EN-US'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<o:p></o:p></span></p>

<p style='margin:0in;margin-bottom:.0001pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New CYR";mso-ansi-language:EN-US'>l = 2; r = count;
k = count<span class=GramE>;</span><br>
do&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<o:p></o:p></span></p>

<p style='margin:0in;margin-bottom:.0001pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New CYR";mso-ansi-language:EN-US'>&nbsp;{<span
class=GramE>for</span> ( j = r; j&gt;=1; j--) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { if A[j-1] {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // обмен <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = A[j-1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A[j-1] =
A[j];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A[j] = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; k = j;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>    </span>}<span style='mso-tab-count:1'>  </span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l = k+1;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:EN-US'>&nbsp; <span
class=GramE>for</span> (j = l;j&lt;=r;j++) <o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:EN-US'>&nbsp;&nbsp;&nbsp;&nbsp;
<span class=GramE>if</span> (A[j-1]&gt;A[j]) {<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:EN-US'>//обмен <o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:EN-US'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
x = <span class=GramE>A[</span>j-1];<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:EN-US'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<span class=GramE>A[</span>j-1] = A[j];<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:EN-US'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
A[j] = x;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:EN-US'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=PT-BR style='font-size:8.0pt;font-family:"Courier New CYR";
mso-ansi-language:PT-BR'>k = j;<o:p></o:p></span></p>

<p class=a style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:
106.2pt;margin-bottom:.0001pt'><span lang=PT-BR style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:PT-BR'>}<o:p></o:p></span></p>

<p class=a style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:
106.2pt;margin-bottom:.0001pt;text-indent:-34.2pt'><span lang=PT-BR
style='font-size:8.0pt;font-family:"Courier New CYR";mso-ansi-language:PT-BR'>&nbsp;r
= k-1;}<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=PT-BR style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:PT-BR'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
while l&lt;=r<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=PT-BR style='font-size:8.0pt;
font-family:"Courier New CYR";mso-ansi-language:PT-BR'>&nbsp;&nbsp;&nbsp; </span><span
style='font-size:8.0pt;font-family:"Courier New CYR"'>}<o:p></o:p></span></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a0>//Сортировка массива по возрастанию методом пузырька.</p>

<p class=a0>//Данные, которые нужно отсортировать, берутся из файла
&quot;massiv.txt&quot;,</p>

<p class=a0>//результат записывается в массив int mas['K'] и выводится на экран</p>

<p class=a0>// Алгоритм реализован на C++.</p>

<p class=a0>#<span lang=EN-US style='mso-ansi-language:EN-US'>include</span>
&lt;<span lang=EN-US style='mso-ansi-language:EN-US'>conio</span>.<span
lang=EN-US style='mso-ansi-language:EN-US'>h</span>&gt;</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>#define K 1000; //</span>Размер<span
style='mso-ansi-language:EN-US'> </span>массива<span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> mas['K'];<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> n;<o:p></o:p></span></p>

<p class=a0>void puzirek()//функция сортирует массив по возрастанию методом
пузырька</p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>{<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> i,j,t;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>    </span><span class=GramE>for(</span>i=0;i&lt;n;i++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>        </span></span><span lang=PT-BR
style='mso-ansi-language:PT-BR'>for(j=1;j&lt;n-i;j++)<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>            </span>if(mas[j]&lt;mas[j-1])<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>            </span>{<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>                </span>t=mas[j];<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>                </span>mas[j]=mas[j-1];<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>                </span></span><span class=GramE><span
lang=EN-US style='mso-ansi-language:EN-US'>mas[</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'>j-1]=t;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> main()<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>{<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>    </span><span class=GramE>clrscr(</span>);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>    </span>FILE *filePointer=<span class=GramE>fopen(</span>&quot;massiv.txt&quot;,&quot;r&quot;);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>    </span><span class=GramE>int</span> i=0;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>    </span><span class=GramE>while</span>
(!feof(filePointer))<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>  </span><span style='mso-spacerun:yes'>      </span></span><span
lang=PT-BR style='mso-ansi-language:PT-BR'>{<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>           
</span>fscanf(filePointer,&quot;%d&quot;,&amp;mas[i]);<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>            </span>i++;<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>  </span>n=i;<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>    </span>puzirek();<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>    </span>for(i=0;i&lt;n;i++)<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>        </span>printf(&quot;%d &quot;,mas[i]);<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>    </span>//scanf(&quot;%d&quot;,&amp;n);<o:p></o:p></span></p>

<p class=a0><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style='mso-spacerun:yes'>    </span></span>getch();</p>

<p class=a0><span style='mso-spacerun:yes'>    </span>return 0;</p>

<p class=a0>}</p>

<p class=a><span style='font-family:"Courier New CYR"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><b style='mso-bidi-font-weight:
normal'><i style='mso-bidi-font-style:normal'><span style='font-size:10.0pt'>Обменная
сортировка с границей<o:p></o:p></span></i></b></p>

<p class=a0>//-<span class=GramE>Однонаправленная</span>&quot;
Шейкер-сортировка</p>

<p class=a0><span class=GramE>void sort(int A[], int n){</span></p>

<p class=a0><span style='mso-spacerun:yes'> </span>int i,b,b1;<span
style='mso-spacerun:yes'>                       </span>// &uml; b граница
отсортированной части </p>

<p class=a0><span style='mso-spacerun:yes'>      </span>for (b=n-1; b!=0; b=b1)
<span class=GramE>{ </span>// Пока граница не сместится к правому краю </p>

<p class=a0><span style='mso-spacerun:yes'>      </span>b1=0;<span
style='mso-spacerun:yes'>                         </span>// b1 место последней
перестановки</p>

<p class=a0><span style='mso-spacerun:yes'>      </span>for (i=0; i&lt;b; i++)<span
style='mso-spacerun:yes'>                          </span>// Просмотр массива</p>

<p class=a0><span style='mso-spacerun:yes'>           </span>if (A[i] &gt; A[i+1])
<span class=GramE>{<span style='mso-spacerun:yes'>   </span></span>// Перестановка
с запоминанием места</p>

<p class=a0><span style='mso-spacerun:yes'>           </span><span class=GramE><span
lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> cc = A[i]; A[i]=A[i+1]; A[i+1]=cc;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>  </span><span
style='mso-spacerun:yes'>         </span>b1=i; <o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>           </span>}}}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int
a[]={4,7,3,4,8,2,3,6,6,4,9,2,3};<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>sort(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>puts(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>&quot;&quot;);<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>}<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-US
style='font-size:10.0pt;mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span></span></b><b style='mso-bidi-font-weight:
normal'><span style='font-size:10.0pt'>Сортировки</span></b><b
style='mso-bidi-font-weight:normal'><span style='font-size:10.0pt;mso-ansi-language:
EN-US'> </span></b><b style='mso-bidi-font-weight:normal'><span
style='font-size:10.0pt'>разделением</span></b><b style='mso-bidi-font-weight:
normal'><span lang=EN-US style='font-size:10.0pt;mso-ansi-language:EN-US'> <o:p></o:p></span></b></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> sort(int in[], int a, int b)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>{<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> i;<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (a==b) return;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span></span><span style='font-family:"Courier New"'>//
</span>Разделить массив в интервале a..b</p>

<p class=a0><span style='mso-tab-count:1'>      </span><span style='font-family:
"Courier New"'>// </span>на две части a..i-1 и i+1..b</p>

<p class=a0><span style='mso-tab-count:1'>      </span><span lang=EN-US
style='font-family:"Courier New";mso-ansi-language:EN-US'>// </span><span
lang=EN-US style='mso-ansi-language:EN-US'>A[i] - </span>медиана<span
style='mso-ansi-language:EN-US'> </span>интервала<span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>sort(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>in,a,i-1);<span style='mso-tab-count:
1'>   </span>sort(in,i+1,b);<o:p></o:p></span></p>

<p class=a0><span style='font-family:"Arial CYR"'>}<o:p></o:p></span></p>

<p class=a>В так называемой <b style='mso-bidi-font-weight:normal'><i
style='mso-bidi-font-style:normal'>БЫСТРОЙ СОРТИРОВКЕ</i></b> разделение
производится с использованием оригинального алгоритма. </p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>//-------&quot;</span>Быстрая<span
lang=EN-US style='mso-ansi-language:EN-US'>&quot; </span>сортировка<span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>void</span> sort(int in[],
int a, int b){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>int</span> i,j,mode;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>if</span> (a&gt;=b)
return;<span style='mso-spacerun:yes'>                                 
</span>// </span>Размер<span style='mso-ansi-language:EN-US'> </span>части<span
lang=EN-US style='mso-ansi-language:EN-US'> =0<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>  </span><span class=GramE>for</span> (i=a, j=b,
mode=1; i &lt; j; mode &gt;0 ? j-- : i++)<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span><span style='mso-spacerun:yes'>  
</span><span class=GramE>if</span></span> (<span lang=EN-US style='mso-ansi-language:
EN-US'>in</span>[<span lang=EN-US style='mso-ansi-language:EN-US'>i</span>]
&gt; <span lang=EN-US style='mso-ansi-language:EN-US'>in</span>[<span
lang=EN-US style='mso-ansi-language:EN-US'>j</span>]){<span
style='mso-spacerun:yes'>           </span>// Перестановка концевой пары</p>

<p class=a0><span style='mso-tab-count:1'>      </span><span
style='mso-spacerun:yes'>  </span><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>int</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> c = in[i]; in[i] = in[j]; in[j]=c;<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  </span></span>mode
= -mode;<span style='mso-spacerun:yes'>                    </span>// &aacute;со
сменой сокращаемого конца</p>

<p class=a0><span style='mso-tab-count:1'>      </span><span
style='mso-spacerun:yes'>  </span><span lang=EN-US style='mso-ansi-language:
EN-US'>}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>sort(</span>in,a,i-1);
sort(in,i+1,b);}<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=a0><span lang=EN-US style='mso-ansi-language:EN-US'>int
a[]={4,7,3,4,8,2,3,6,6,4,9,2,3};<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>sort(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>a,0,n-1);<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=a0>puts(&quot;&quot;);</p>

<p class=a0>}</p>

<p class=a>Пример: </p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>9, 7, 18, 3, 52, 4, 6, 8, 5, 13, 42, 30, 35, 26</p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>7, 3, 4, 6, 8, 5/ &lt;9&gt;/ 18, 52, 13, 42, 30, 35, 26</p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>3, 4, 6, 5/&lt;7&gt;/ 8/ 9/ 13/ &lt;18&gt;/ 52, 42, 30, 35, 26</p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>&lt;3&gt;/ 4, 6, 5/ 7/ 8/ 9/ 13/ 18/ 42, 30, 35, 26/ &lt;52&gt;</p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>3/ &lt;4&gt;/ 6, 5/ 7/ 8/ 9/ 13/ 18/ 30, 35, 26/ &lt;42&gt;/ 52</p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>3/ 4/ 5/ &lt;6&gt;/ 7/ 8/ 9/ 13/ 18/ 26/ &lt;30&gt;/ 35/ 42/ 52</p>

<p class=a0><o:p>&nbsp;</o:p></p>

<p class=a>Еще один алгоритм <b style='mso-bidi-font-weight:normal'><i
style='mso-bidi-font-style:normal'>БЫСТРОЙ СОРТИРОВКИ</i></b>. Выберем
случайным образом какой-то элемент х и просмотрим массив, двигаясь слева
направо, пока не найдем а<span class=GramE>i</span> больший x, а затем справа
налево, пока не<span style='mso-spacerun:yes'>  </span>найдем аi меньший х.
Поменяем их местами и продолжим процесс просмотра с обменом, пока просмотры не
встретятся где-то в середине массива. <span style='mso-spacerun:yes'> </span>В результате
массив разделится на две части: левую - с ключами, меньшими х и правую - с
ключами, большими х. <span style='mso-spacerun:yes'> </span>Этот шаг называется
разделением. Х - центром. <span style='mso-spacerun:yes'>  </span>К
получившимся частям рекурсивно применяем ту же процедуру. <span
style='mso-spacerun:yes'> </span>В результате получается очень эффективная
сортировка</p>

<pre><o:p>&nbsp;</o:p></pre><pre>// Пример <span class=GramE>рекурсивной</span> QuickSort</pre><pre>typedef int item;<span style='mso-spacerun:yes'>       </span>// Тип сортируемых элементов </pre><pre>typedef int tblIndex;<span style='mso-spacerun:yes'>   </span>// Тип ключей, по которым сортируем </pre><pre><o:p>&nbsp;</o:p></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'>#define <span class=GramE>CompGT(</span>a,b) (a &gt; b)<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>tblIndex</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> partition(T *a, tblIndex lb, tblIndex ub) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span><span
class=GramE>item</span> t, pivot;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>tblIndex</span> i, j, p;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>   </span></span>/**********************************</pre><pre><span style='mso-spacerun:yes'>    </span>*<span style='mso-spacerun:yes'>  </span>разделение массива a[lb..ub]<span style='mso-spacerun:yes'>  </span>*</pre><pre><span style='mso-spacerun:yes'>    </span>**********************************/</pre><pre><span style='mso-spacerun:yes'>    </span>/* Выбираем центр - pivot */</pre><pre><span style='mso-spacerun:yes'>    </span>p = lb + ((ub - lb)&gt;&gt;1);</pre><pre><span style='mso-spacerun:yes'>    </span><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>pivot</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> = a[p];<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>a[</span>p] = a[lb];<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span>// сортируем lb+1..ub относительно центра </pre><pre><span style='mso-spacerun:yes'>    </span><span
lang=EN-US style='mso-ansi-language:EN-US'>i</span> = <span lang=EN-US
style='mso-ansi-language:EN-US'>lb</span>+1;</pre><pre><span style='mso-spacerun:yes'>    </span><span
lang=EN-US style='mso-ansi-language:EN-US'>j = ub;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>while</span> (1) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>while</span> (i &lt; j &amp;&amp; compGT(pivot, a[i])) i++;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>while</span> (j &gt;= i &amp;&amp; compGT(a[j], pivot)) j--;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>if</span> (i &gt;= j) break;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>t = a[i];<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>a[</span>i] = a[j];<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>a[</span>j] = t;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>j--</span>; i++;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>/* </span>центр<span
style='mso-ansi-language:EN-US'> </span>в<span lang=EN-US style='mso-ansi-language:
EN-US'> a[j] */<o:p></o:p></span></pre><pre><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>    </span><span class=GramE>a[</span>lb] = a[j];<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>a[</span>j] = pivot;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>return</span> j;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> quickSort(T *a, tblIndex lb, tblIndex ub) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>tblIndex</span> m;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>   </span>/**************************<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>*<span style='mso-spacerun:yes'>  </span><span lang=RU
style='mso-ansi-language:RU'>сортируем</span></span><span style='mso-spacerun:yes'>  </span>a[lb..<span
class=GramE>ub</span>]<span style='mso-spacerun:yes'>  </span>*<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span>**************************/</pre><pre><span style='mso-spacerun:yes'>    </span><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>while</span></span> (<span
lang=EN-US style='mso-ansi-language:EN-US'>lb</span> &lt; <span lang=EN-US
style='mso-ansi-language:EN-US'>ub</span>) {</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>        </span>// сортировка вставками для малых массивов </pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (ub - lb &lt;= 12) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>insertSort(</span>a, lb, ub);<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>return</span>;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>// </span>разделение<span
style='mso-ansi-language:EN-US'> </span>пополам<span lang=EN-US
style='mso-ansi-language:EN-US'> <o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>m = partition (a, lb, ub);<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span></span>// Уменьшаем требования к памяти:<span style='mso-spacerun:yes'>    </span></pre><pre><span style='mso-spacerun:yes'>        </span>//<span style='mso-spacerun:yes'>  </span>меньший сегмент сортируем первым </pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (m - lb &lt;= ub - m) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>quickSort(</span>a, lb, m - 1);<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>lb</span> = m + 1;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>} else {<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>quickSort(</span>a, m + 1, ub);<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span></span>ub = m - 1;</pre><pre><span style='mso-spacerun:yes'>   </span><span style='mso-spacerun:yes'>     </span>}</pre><pre><span style='mso-spacerun:yes'>    </span>}</pre><pre>}</pre>

<p class=a><span style='mso-spacerun:yes'>   </span>На практике для увеличения
быстроты, но не симптотики, можно произвести несколько улучшений:</p>

<p class=a><span style='mso-spacerun:yes'>    </span>1. В качестве <span
class=GramE>центрального</span> для функции partition выбирается элемент,
расположенный в середине.</p>

<p class=a><span style='mso-spacerun:yes'>    </span>1' Можно выбрать <span
class=GramE>средний</span> из первого, последнего и среднего элементов.<span
style='mso-spacerun:yes'>  </span>Maxim Razin:<span style='mso-spacerun:yes'> 
</span>Тогда количество проходов уменьшится в 7/6 раз.</p>

<p class=a><span style='mso-spacerun:yes'>     </span>2. Для коротких массивов
вызывается сортировка вставками.</p>

<p class=a><span style='mso-spacerun:yes'>     </span>3. Если последний
оператор функции является вызовом этой функции, говорят о хвостовой рекурсии. Ее<span
style='mso-spacerun:yes'>  </span>имеет смысл <span class=GramE>заменять на</span>
итерации - в этом случае лучше используется стек.</p>

<p class=a><span style='mso-spacerun:yes'>       </span>4. После разбиения
сначала сортируется меньший<span style='mso-spacerun:yes'>  </span>раздел.</p>

<pre><span style='mso-spacerun:yes'>          </span></pre>

<p class=a><span style='mso-spacerun:yes'>      </span>Общее быстродействие
быстрой сортировки - <span lang=EN-US style='mso-ansi-language:EN-US'>O</span><span
class=GramE>( </span><span lang=EN-US style='mso-ansi-language:EN-US'>nlog</span>(<span
lang=EN-US style='mso-ansi-language:EN-US'>n</span>) ). Случай n^2
теоретически<span style='mso-spacerun:yes'>   </span>возможен, но крайне <span
class=GramE>[ </span>1 / (n^logn) ] маловероятен.<span
style='mso-spacerun:yes'>  </span></p>

<p class=a>Алгоритм разделения можно выполнить итерационно, применяя его к той
части массива, которая содержит его середину (по аналогии с двоичным поиском).
Тогда в каждом шаге итерации медиана будет сдвигаться к середине массива.
Другой пример обменной сортировки на основе разделения <span class=GramE>-<b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>П</i></b></span><b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>ОРАЗРЯДНАЯ
СОРТИРОВКА</i></b> . </p>

<pre><span style='font-size:11.0pt'><o:p>&nbsp;</o:p></span></pre><pre>//--------------- <b
style='mso-bidi-font-weight:normal'>Поразрядная сортировка разделением</b></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-tab-count:1'>    </span>bitsort(int A[],int a,int b, unsigned m){<o:p></o:p></span></pre><pre>int i;</pre><pre>if (a+1 &gt;= b) return; <span
style='mso-tab-count:2'>         </span>// Интервал сжался в точку</pre><pre>if (m<span style='mso-spacerun:yes'>   </span>== 0) return; <span
style='mso-tab-count:2'>         </span>// Проверяемые биты закончились</pre><pre><span
style='mso-tab-count:3'>                       </span><span style='mso-spacerun:yes'>    </span><span
style='mso-tab-count:2'>           </span>// Маска после сдвига стала 0</pre><pre>// Разделить массив на две части по значению бита,</pre><pre>// <span
class=GramE>установленного</span> в m, i - граница разделенных частей</pre><pre>int j,vv;<span
style='mso-tab-count:2'>              </span><span style='mso-spacerun:yes'>  </span><span
style='mso-tab-count:2'>             </span>// Цикл разделения массива<span style='mso-spacerun:yes'>  </span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (i=a, j=b; i&gt;1);<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>bitsort(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>A,i+1,b,m &gt;&gt;1); }<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> mainsort(int B[], int n){<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> max,i; unsigned m;<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>for(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>max = 0, i=0; i&lt; n; i++)<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-tab-count:1'>        </span><span
class=GramE>if</span> (B[i] &gt; max) max = B[i];<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (m=1; m &lt; max; m &lt;&lt;= 1);<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'>m &gt;&gt;=1;<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>bitsort(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>B,0,n-1,m); }<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'>#include <o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> main(){<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'>int a[]={4,7,3,4,18,2,3,16,6,114,9,2,3};<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>mainsort(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></pre>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>for</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>puts</span><span style='font-size:10.0pt;font-family:"Courier New"'>(</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'>&quot;&quot;); }<o:p></o:p></span></p>

<h3><span style='font-size:10.0pt'>Сортировка подсчетом </span><span
style='font-size:10.0pt;font-family:"Times New Roman CYR"'><o:p></o:p></span></h3>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'> </span></p>

<p class=a style='margin-top:0in'>B=&lt;20,-5,10,8,7&gt;,<span
style='mso-spacerun:yes'>   </span></p>

<p class=a style='margin-top:0in'>S=&lt;4,<span style='mso-spacerun:yes'> 
</span>0, 3,2,1&gt;,<span style='mso-spacerun:yes'>  </span></p>

<p class=a style='margin-top:0in'>B’=&lt;-5,7,8,10,20&gt;.</p>

<p class=a><span style='mso-spacerun:yes'> </span>Трудоемкость алгоритма
-n*n/2. <span style='font-family:"Times New Roman"'>.</span> </p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>//<span class=GramE>-----
)Сортировка</span> подсчетом (неполная)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>void</span> sort(int
in[],int out[],int n)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>{ int</span> i,j ,cnt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span><span class=GramE>for</span> (i=0; i&lt;
n; i++) {<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span><span class=GramE>for</span> ( cnt=0,j=0;
j&lt;n; j++)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>           </span><span class=GramE>if</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'> (</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>] &lt; </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>in</span><span style='font-size:10.0pt;font-family:"Courier New"'>[</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>i</span><span style='font-size:10.0pt;font-family:"Courier New"'>]) </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>cnt</span><span style='font-size:10.0pt;font-family:"Courier New"'>++;
// ‘Счетчик элементов, больших текущего<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>      </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>out</span><span style='font-size:10.0pt;font-family:
"Courier New"'>[</span></span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>cnt</span><span
style='font-size:10.0pt;font-family:"Courier New"'>]=</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>i</span><span
style='font-size:10.0pt;font-family:"Courier New"'>];<span
style='mso-spacerun:yes'>               </span>// Определяет его место в
выходном<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>      </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>} }</span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>                                                  
</span>// массиве<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>#include &lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int
a[]={4,7,3,4,8,2,3,6,6,4,9,2,3};<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>int</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> b[20];<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>int</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>sort(</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>a,b,n);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>for</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,b[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>puts</span><span style='font-size:10.0pt;font-family:"Courier New"'>(</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'>&quot;&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<h3><span style='font-size:10.0pt'>Сортировка выбором </span><span
style='font-size:10.0pt;font-family:"Times New Roman CYR"'><o:p></o:p></span></h3>

<p class=a style='margin-top:0in'><b style='mso-bidi-font-weight:normal'><span
style='mso-spacerun:yes'> </span><i style='mso-bidi-font-style:normal'>ПРЯМАЯ
ВЫБОРКА</i></b><i style='mso-bidi-font-style:normal'>.</i> Согласно этому
методу<span class=GramE>,н</span>ачиная с первой записи таблицы, осуществляется
поиск элемента,имеющего наименьшее значение ключа. После&nbsp;&nbsp;&nbsp;
того, как этот элемент найден, он меняется местами с первой записью в таблице.
В результате такой перестановки запись с наименьшим значением ключа помещается
в первую позицию в таблице. Затем, начиная со второго элемента таблицы,
осуществляется поиск второго наименьшего ключа. Найденный элемент меняется
местами со вторым элементом таблицы. Этот процесс продолжается до тех пор, пока
все записи не будут расположены в порядке возрастания кодов ключа. Число
сравнений в данном методе равно n(n-1)/2 (в среднем порядка n**2),где n -
количество записей в таблице. Максимальное количество перестановок при такой
сортировке равно (n-1). </p>

<p class=a style='margin-top:0in'>Например: </p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>           
</span>B=&lt;20,10,8,-5,7&gt;, B'=&lt;&gt;</p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>           
</span><span lang=EN-US style='mso-ansi-language:EN-US'>B=&lt;20<span
class=GramE>,10,8,7</span>&gt;,<span style='mso-spacerun:yes'>   
</span>B'=&lt;-5&gt;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B=&lt;20<span
class=GramE>,10,8</span>&gt;,<span style='mso-spacerun:yes'>     
</span>B'=&lt;-5,7&gt;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B=&lt;20<span
class=GramE>,10</span>&gt;,<span style='mso-spacerun:yes'>       
</span>B'=&lt;-5,7,8&gt;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B=&lt;20&gt;,<span
style='mso-spacerun:yes'>           </span>B'=&lt;-5<span class=GramE>,7,8,10</span>&gt;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B</span>=&lt;&gt;,<span
style='mso-spacerun:yes'>            </span><span lang=EN-US style='mso-ansi-language:
EN-US'>B</span>'=&lt;-5<span class=GramE>,7,8,10,20</span>&gt; .</p>

<p class=a style='margin-top:0in'>Функция select упорядочивает массив s
сортировкой посредством выбора. </p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>      </span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";color:black;mso-ansi-language:EN-US'>/*<span
style='mso-spacerun:yes'>    </span></span><span class=GramE><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>сортировка</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>  </span></span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>методом</span></span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>  </span></span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>выбора</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>          </span>*/<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span><span
class=GramE>double</span> *select( double *s, int m, int n)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>int</span> i,j;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>double</span> c;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>for</span> (i=m; is[j])<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>             </span><span
class=GramE>{<span style='mso-spacerun:yes'>  </span>c</span>=s[i];<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>s[</span>i]=s[j];<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>s[</span>j]=c;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>             </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>return(s)</span>;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span></span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>}<o:p></o:p></span></p>

<p class=a>При сортировке посредством выбора требуется Q=(n-m)*(n-m) действий и
не требуется дополнительной памяти. </p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> sort(int in[], int n){ <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span><span class=GramE>for</span> ( int i=0; i
&lt; n-1; i++){<span style='mso-spacerun:yes'>                </span>// Для
очередного i<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span style='mso-spacerun:yes'>  </span><span
class=GramE>for</span> ( int j=i+1, k=i; j&lt;n; j++)<span
style='mso-spacerun:yes'>      </span>// k - индекс минимального<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span style='mso-spacerun:yes'>  </span><span
class=GramE>if</span> (in[j] &lt; in[k]) k=j;<span
style='mso-spacerun:yes'>                    </span>// в диапазоне i..<span
class=GramE>n-1</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span style='mso-spacerun:yes'>  </span><span
class=GramE>int</span></span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New"'> </span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>c</span><span
style='font-size:10.0pt;font-family:"Courier New"'>=</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>]; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>] = </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>i</span><span
style='font-size:10.0pt;font-family:"Courier New"'>]; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>i</span><span
style='font-size:10.0pt;font-family:"Courier New"'>] = </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>c</span><span
style='font-size:10.0pt;font-family:"Courier New"'>; // Три стакана для
очередного<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-tab-count:1'>    </span><span
style='mso-spacerun:yes'>  </span><span class=GramE>}}<span
style='mso-spacerun:yes'>                                            </span>//
и минимального</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int
a[]={4,7,3,4,8,2,3,6,6,4,9,2,3};<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>int</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>sort(</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>for</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>puts</span><span style='font-size:10.0pt;font-family:"Courier New"'>(</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'>&quot;&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:8.0pt;
font-family:"Courier New"'>// еще одна программа сортировки<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:8.0pt;
font-family:"Courier New"'>#</span><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>include</span><span
style='font-size:8.0pt;font-family:"Courier New"'> &lt;</span><span lang=EN-US
style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>stdio</span><span
style='font-size:8.0pt;font-family:"Courier New"'>.</span><span lang=EN-US
style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>h</span><span
style='font-size:8.0pt;font-family:"Courier New"'>&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>#define <span
class=GramE>swap(</span>a,b) { int tmp; tmp=a; a=b; b=tmp; }<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>main()</span></span><span lang=EN-US style='font-size:8.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>{<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>     </span><span class=GramE>int</span> a[10], dim=10;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>     </span><span class=GramE>int</span> i, j, k;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>     </span></span><span lang=PT-BR style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'>for (i=0;i&lt;dim;i++)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>     </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:2'>            </span>printf(&quot;</span><span
lang=EN-US style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>Элемент</span><span lang=PT-BR style='font-size:8.0pt;font-family:"Courier New";
mso-ansi-language:PT-BR'>\n&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:2'>            </span>scanf(&quot;%d&quot;,&amp;a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>     </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>     </span>printf(&quot;</span><span lang=EN-US
style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>Было</span><span
lang=PT-BR style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:
PT-BR'>\n&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>     </span></span><span class=GramE><span lang=EN-US
style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'> (i=0;i&lt;dim; i++)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span><span class=GramE>printf(</span>&quot;%d\n&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>     </span></span><span style='font-size:8.0pt;
font-family:"Courier New"'>/* Проход массива, начиная с 0-го до предпоследнего
элемента */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:8.0pt;
font-family:"Courier New"'><span style='mso-tab-count:1'>     </span></span><span
class=GramE><span lang=EN-US style='font-size:8.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>for</span></span><span style='font-size:8.0pt;
font-family:"Courier New"'> (</span><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>i</span><span
style='font-size:8.0pt;font-family:"Courier New"'> = 0; </span><span
lang=EN-US style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>i</span><span style='font-size:8.0pt;font-family:"Courier New"'> &lt; </span><span
lang=EN-US style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>dim</span><span style='font-size:8.0pt;font-family:"Courier New"'>-1; </span><span
lang=EN-US style='font-size:8.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>i</span><span style='font-size:8.0pt;font-family:"Courier New"'>++)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:8.0pt;
font-family:"Courier New"'><span style='mso-tab-count:1'>     </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:8.0pt;
font-family:"Courier New"'><span style='mso-tab-count:2'>            </span>/*
Проход массива, начиная с (</span><span lang=EN-US style='font-size:8.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>i</span><span
style='font-size:8.0pt;font-family:"Courier New"'>+1)-го до последнего элемента
*/<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:8.0pt;
font-family:"Courier New"'><span style='mso-tab-count:2'>            </span></span><span
class=GramE><span lang=EN-US style='font-size:8.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>for</span></span><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'> (k = i, j = i+1; j
&lt; dim; j++)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:3'>                  </span><span class=GramE>if(</span>a[j]
&lt; a[k]) k = j;<span style='mso-spacerun:yes'>  </span>/* Поиск наименьшего
k-го эл-та */ swap(a[k], a[i]);<span style='mso-spacerun:yes'>        
</span>/* Перемещение наименьшего &quot;вверх&quot; */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>     </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>     </span><span class=GramE>printf(</span>&quot;Стало\n&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>     </span><span class=GramE>for</span> (i=0;i&lt;dim;
i++)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
8.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>            </span><span class=GramE>printf(</span>&quot;%d\n&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:8.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><b style='mso-bidi-font-weight:
normal'><i style='mso-bidi-font-style:normal'><span style='font-size:10.0pt'>ЗАКОНСПЕРИРОВАННАЯ
СОРТИРОВКА ВЫБОРОМ<o:p></o:p></span></i></b></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'> </span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>sort</span><span style='font-size:10.0pt;
font-family:"Courier New"'>(</span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>int</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New"'> </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[], </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'> </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>n</span><span style='font-size:10.0pt;font-family:"Courier New"'>){ <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'> </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>for</span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'> ( int i=0; i &lt;
n-1; i++)<span style='mso-spacerun:yes'>                      </span>// iДля
очередного i<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>  </span><span class=GramE>for</span> ( int j=i+1, k=i;
j&lt;n; j++)<span style='mso-spacerun:yes'>               </span>// </span><span
style='font-size:10.0pt;font-family:"Courier New"'>Для</span><span
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'> </span><span
style='font-size:10.0pt;font-family:"Courier New"'>всех</span><span
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'> </span><span
style='font-size:10.0pt;font-family:"Courier New"'>оставшихся</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'> <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span style='mso-spacerun:yes'>  </span><span
class=GramE>if</span> (in[j] &lt; in[ i]) {<span
style='mso-spacerun:yes'>                      </span>// в диапазоне i..<span
class=GramE>n-1</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span><span class=GramE>int</span> c=in[i];
in[i] = in[j]; in[j] = c; <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span></span><span class=GramE><span
style='font-size:10.0pt;font-family:"Courier New"'>}<span
style='mso-spacerun:yes'>                                </span>// сразу же
менять с очередным </span></span><span style='font-size:10.0pt;font-family:
"Courier New"'><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'> </span><span
class=GramE>}<span style='mso-spacerun:yes'>                            
</span><span style='mso-spacerun:yes'>            </span>// ‚Выбор совмещен с
обменом</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int
a[]={4,7,3,4,8,2,3,6,6,4,9,2,3};<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>int</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>sort(</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>for</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>puts</span><span style='font-size:10.0pt;font-family:"Courier New"'>(</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'>&quot;&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=a><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'>СОРТИРОВКА КВАДРАТИЧНОЙ ВЫБОРКОЙ. <o:p></o:p></i></b></p>

<p class=a>Данный метод по сравнению с сортировкой выборкой уменьшает число
сравнений, но требует дополнительного объема памяти. Сортируемая таблица,
состоящая из n элементов, разделяется на n групп по sqrt(n) элементов в каждой.
Если n не является точным квадратом<span class=GramE>,т</span>о таблица разделяется
на n' групп, где n'<br>
есть ближайший точный квадрат, больший n. В каждой&nbsp;&nbsp;&nbsp;&nbsp;
группе выбирается наименьший элемент, который пересылается во вспомогательный
список. Вспомогательный список просматривается, и наименьший его элемент
пересылается в зону вывода (в зоне вывода формируется отсортированный список).
Далее из группы, содержащей элемент, посылаемый в зону вывода, выбирается новый
наименьший элемент, который помещается во вспомогательный список. Затем другой
просмо<span class=GramE>тр всп</span>омогательного списка выбырает новый
наименьший элемент, который является вторым по величине во всем списке. Он
пересылается в зону вывода. Элементы групп, которые уже посланы во
вспомогательный список, заменяются большими фиктивными величинами.</p>

<p class=a>Количество действий, требуемое для сортировки квадратичной выборкой,
несколько меньше, чем в предыдущих методах Q= N*N, но требуется дополнительная
память для хранения списка G.<br>
Общее число сравнений для случая точного квадрата равно приблизительно
2n*sqrt(n), необходимый резерв памяти - поле длиной (n+sqrt(n)) элемент.</p>

<h3><span style='font-size:10.0pt'>Сортировки вставками</span><span
style='font-size:10.0pt;font-family:"Times New Roman CYR"'> </span><span
style='font-size:10.0pt'><o:p></o:p></span></h3>

<p class=a><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'><span style='mso-spacerun:yes'> </span>ПРОСТАЯ ВСТАВКА<o:p></o:p></i></b></p>

<p class=a style='margin-top:0in'><u>1.</u> Определяется место в
отсортированной части массива, куда должен помещаться элемент. Элементы от
данной позиции <span class=GramE>сдвигаются вверх и на освободившееся место
помещается</span> элемент. Трудоемкость алгоритма при линейном поиске -n*n/4.
Если используется двоичный поиск для определения места элемента, то
трудоемкость алгоритма составляет n*log(n). Однако эта трудоемкость не
учитывает затрат на перемещение элементов при сдвиге. Естественным образом простые
вставки выполняются в линейных списках. <span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>//ПРОСТАЯ ВСТАВКА<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'> </span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>sort</span><span style='font-size:10.0pt;
font-family:"Courier New"'>(</span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>int</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New"'> </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[], </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'> </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>n</span><span style='font-size:10.0pt;font-family:"Courier New"'>){ <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>      </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>for</span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'> ( int i=1; i &lt; n;
i++) {<span style='mso-spacerun:yes'>                 </span>// Для очередного
i<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>int</span></span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'> </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>v</span><span style='font-size:10.0pt;font-family:"Courier New"'>=</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>in</span><span style='font-size:10.0pt;font-family:"Courier New"'>[</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>i</span><span style='font-size:10.0pt;font-family:"Courier New"'>];<span
style='mso-spacerun:yes'>                         </span>// Делай 1 : сохранить
очередной<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>  </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>for</span></span><span style='font-size:10.0pt;
font-family:"Courier New"'> (</span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>int</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New"'> </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>=0; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>&lt;</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>i</span><span
style='font-size:10.0pt;font-family:"Courier New"'>; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>++)<span
style='mso-spacerun:yes'>              </span>// Делай 2 : поиск места вставки<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>      </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>if</span><span style='font-size:10.0pt;font-family:
"Courier New"'>(</span></span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>]&gt;</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>v</span><span style='font-size:10.0pt;font-family:"Courier New"'>) </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>break</span><span style='font-size:10.0pt;font-family:"Courier New"'>;<span
style='mso-spacerun:yes'>                    </span>// / перед первым, большим </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>v</span><span style='font-size:10.0pt;font-family:"Courier New"'><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'> </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>for</span><span style='font-size:10.0pt;font-family:
"Courier New"'>(</span></span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>int</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New"'> </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>=</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>i</span><span
style='font-size:10.0pt;font-family:"Courier New"'>-1; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>&gt;=</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>k</span><span style='font-size:10.0pt;font-family:"Courier New"'>; </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>j</span><span style='font-size:10.0pt;font-family:"Courier New"'>--)<span
style='mso-spacerun:yes'>              </span>// Делай 3: </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>c</span><span style='font-size:10.0pt;font-family:"Courier New"'>двиг на
1 вправо <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>      </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>in</span><span style='font-size:10.0pt;font-family:
"Courier New"'>[</span></span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>+1]=</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>in</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>];<span
style='mso-spacerun:yes'>                    </span>// от очередного до найденного<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'> </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>in</span><span style='font-size:10.0pt;font-family:
"Courier New"'>[</span></span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>]=</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>v</span><span
style='font-size:10.0pt;font-family:"Courier New"'>;<span
style='mso-spacerun:yes'>                     </span>// Делай 4 : вставка
очередного на место<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>      </span><span
class=GramE>}}<span
style='mso-spacerun:yes'>                                     </span>//
первого, большего него</span><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>#</span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>include</span><span
style='font-size:10.0pt;font-family:"Courier New"'> &lt;</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>stdio</span><span style='font-size:10.0pt;font-family:"Courier New"'>.</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>h</span><span style='font-size:10.0pt;font-family:"Courier New"'>&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int
a[]={4,7,3,4,8,2,3,6,6,4,9,2,3};<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>int</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>sort(</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>for</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>puts(</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>&quot;&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>}<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><u><span lang=EN-US style='mso-ansi-language:
EN-US'>2.</span></u><span lang=EN-US style='mso-ansi-language:EN-US'> <o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B=&lt;20,-5<span
class=GramE>,10,8,7</span>&gt;<span style='mso-spacerun:yes'> 
</span>B'=&lt;&gt;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B=&lt;-5<span
class=GramE>,10,8,7</span>&gt;<span style='mso-spacerun:yes'>   
</span>B'=&lt;20&gt;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B=&lt;10<span
class=GramE>,8,7</span>&gt;<span style='mso-spacerun:yes'>      
</span>B'=&lt;-5,20&gt;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B=&lt;8<span
class=GramE>,7</span>&gt;<span style='mso-spacerun:yes'>        
</span>B'=&lt;-5,10,20&gt;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B=&lt;7&gt;<span
style='mso-spacerun:yes'>            </span>B'=&lt;-5<span class=GramE>,8,10,20</span>&gt;<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>            </span>B=&lt;&gt;<span
style='mso-spacerun:yes'>              </span>B'=&lt;-5<span class=GramE>,7,8,10,20</span>&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><span
style='font-size:10.0pt;color:black'>Функция insert реализует сортировку
вставкой. <o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>      </span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";color:black;mso-ansi-language:EN-US'>/*<span
style='mso-spacerun:yes'>    </span></span><span class=GramE><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>сортировка</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>  </span></span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>методом</span></span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>   </span></span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>вставки</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>              </span>*/<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span><span
class=GramE>float</span> *insert(float *s, int m, int n)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span><span
class=GramE>int</span> i,j,k;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span><span
class=GramE>float</span> aux;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span><span
class=GramE>for</span> (i=m+1; i&lt;=n; i++) { aux=&quot;s[i];&quot; for
(k=&quot;m;&quot; k&lt;=&quot;i&quot; &amp;&amp; s[k]=k; j--)<span
style='mso-spacerun:yes'>  </span>s[j+1]=s[j];<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>             </span><span
class=GramE>s[</span>k]=aux;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>           </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>           </span><span
class=GramE>return(</span>a);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span></span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>}<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><u>3.</u><span
style='mso-spacerun:yes'>             </span>Пример:</p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>       
</span>Начальные ключи<span style='mso-spacerun:yes'>         </span>44 \\ 55
12 42 94 18 06 67</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                 </span>i = 2<span
style='mso-spacerun:yes'>   </span><span
style='mso-spacerun:yes'>       </span>44 55 \\ 12 42 94 18 06 67</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                 </span>i = 3<span
style='mso-spacerun:yes'>          </span>12 44 55 \\ 42 94 18 06 67</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                 </span><span lang=EN-US
style='mso-ansi-language:EN-US'>i = 4<span style='mso-spacerun:yes'>         
</span>12 42 44 55 \\ 94 18 06 67<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>                 </span>i = 5<span
style='mso-spacerun:yes'>          </span>12 42 44 55 94 \\ 18 06 67<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>                 </span>i = 6<span
style='mso-spacerun:yes'>          </span>12 18 42 44 55 94 \\ 06 67<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>                 </span>i = 7<span
style='mso-spacerun:yes'>          </span>06 12 18 42 44 55 94 \\ 67<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>                 </span>i = 8<span
style='mso-spacerun:yes'>          </span>06 12 18 42 44 55 67 94 \\<o:p></o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>             </span><i style='mso-bidi-font-style:
normal'><span style='mso-spacerun:yes'>  </span></i></span><i style='mso-bidi-font-style:
normal'>Анализ</i><i style='mso-bidi-font-style:normal'><span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></i></p>

<p class=a style='margin-top:0in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>        </span></span>Число сравнений</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                             </span>минимальное:<span
style='mso-spacerun:yes'>           </span>n - 1</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                   </span><span
style='mso-spacerun:yes'>          </span>среднее:<span
style='mso-spacerun:yes'>         </span><span class=GramE>( </span>n^2 + n - 2
) / 4</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                             </span>максимальное:<span
style='mso-spacerun:yes'>   </span><span class=GramE>( </span>n^2 + n ) * / 2 -
1</p>

<p class=a style='margin-top:0in'><span style='mso-spacerun:yes'>       
</span>Количество пересылок</p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                             </span>минимальное:<span
style='mso-spacerun:yes'>       </span>2 * <span class=GramE>( </span>n - 1 )</p>

<p class=a style='margin-top:0in'><o:p>&nbsp;</o:p></p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                             </span>среднее:<span
style='mso-spacerun:yes'>      </span><span class=GramE>( </span>n^2 + 9 * n -
10 ) / 4</p>

<p class=a style='margin-top:0in'><o:p>&nbsp;</o:p></p>

<p class=a style='margin-top:0in'><span
style='mso-spacerun:yes'>                             </span>максимальное:<span
style='mso-spacerun:yes'>  </span><span class=GramE>( </span>n^2 + 3 * n - 4 )
/ 2</p>

<p class=a>Общее быстродействие - O<span class=GramE>( </span>n^2 ), но ввиду
простоты метода, является наибыстрейшим для малых ( 12-20 элементов )
массивов.<span style='mso-spacerun:yes'>  </span>Естественное поведение. Легко
прибавлять новые элементы. Ввиду своих особенностей, чрезвычайно <span
class=GramE>хорош</span> для списков.<span style='mso-spacerun:yes'>  
</span>Сортировка не требует дополнительной памяти.</p>

<pre>typedef int item;<span style='mso-spacerun:yes'>          </span>/* Тип сортируемых элементов */</pre><pre>typedef int tblIndex;<span style='mso-spacerun:yes'>      </span>/* Тип ключей, по которым сортируем */</pre><pre><o:p>&nbsp;</o:p></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'>#define <span class=GramE>compGT(</span>a,b) (a &gt; b)<span style='mso-spacerun:yes'>   </span>/* </span>Функция<span
style='mso-ansi-language:EN-US'> </span>сравнения<span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>  </span>*/<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> insertSort(T *a, tblIndex lb, tblIndex ub) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>item</span> t;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>tblIndex</span> i, j;<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>   </span>/***********************<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>* </span><span
class=GramE>сортируем</span><span lang=EN-US style='mso-ansi-language:EN-US'> a[lb..<span
class=GramE>ub</span>] *<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>***********************/<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>for</span> (i = lb + 1; i &lt;= ub; i++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span></span>t = a[i];</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>        </span>/* Сдвигаем элементы вниз, пока */</pre><pre><span style='mso-spacerun:yes'>        </span>/*<span style='mso-spacerun:yes'>  </span>не найдем место вставки.<span style='mso-spacerun:yes'>    </span>*/</pre><pre><span style='mso-spacerun:yes'>        </span>for (j = i-1; j &gt;= lb &amp;&amp; compGT(a[j], t); j--)</pre><pre><span style='mso-spacerun:yes'>            </span><span
lang=PT-BR style='mso-ansi-language:PT-BR'>a[j+1] = a[j];<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>        </span>/* </span>вставка<span
lang=PT-BR style='mso-ansi-language:PT-BR'> */<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>        </span>a[j+1] = t;<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>    </span></span>}</pre><pre>}</pre>

<p class=a><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'>ВСТАВКА ПОГРУЖЕНИЕМ<o:p></o:p></i></b></p>

<p class=a>Очередной элемент путем ряда обменов <span style='font-family:"Times New Roman"'>“</span>погружается<span
style='font-family:"Times New Roman"'>”</span> до требуемой позиции в уже
упорядоченную часть массива. </p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>//----- Вставка погружением, подозрительно похожая
на обмен<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>  </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>void</span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'> sort(int in[],int n)
{<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>for</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'> ( </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'> </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>i</span><span style='font-size:10.0pt;font-family:"Courier New"'>=1; </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>i</span><span style='font-size:10.0pt;font-family:"Courier New"'>&lt;</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>n</span><span style='font-size:10.0pt;font-family:"Courier New"'>; </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>i</span><span style='font-size:10.0pt;font-family:"Courier New"'>++) //
&iuml;Пока не достигли &quot; дна&quot; или меньшего себя<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-tab-count:1'>    </span><span
style='mso-spacerun:yes'>  </span></span><span class=GramE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'> ( int k=i; k !=0 &amp;&amp; in[k] &lt; in[k-1]; k--){<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span><span class=GramE>int</span> c=in[k];
in[k]=in[k-1]; in[k-1]=c;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>      </span>}} <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int
a[]={4,7,3,4,8,2,3,6,6,4,9,2,3};<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>int</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>sort(</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>for</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>puts</span><span style='font-size:10.0pt;font-family:"Courier New"'>(</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'>&quot;&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=a><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'>СОРТИРОВКА ШЕЛЛА</i></b> </p>

<p class=a>Метод состоит в том, что упорядочиваемая таблица разделяется на
группы элементов, каждая из которых упорядочивается методом вставки. В процессе
упорядочения размеры таких групп&nbsp;&nbsp;&nbsp; увеличиваются до тех пор,
пока все элементы таблицы не войдут в упорядоченную группу. Выбор очередной
упорядочиваемой группы и ее расположение внутри таблицы производятся так, чтобы
можно было использовать предшествующую упорядоченность. Группой называют
последовательность элементов, номера которых образуют арифметическую прогрессию
с разностью h (h называют шагом группы). В начале процесса упорядочения
выбирается первый шаг группы h1, который зависит от размера таблицы. Шелл
предложил брать</p>

<p class=a>&nbsp;&nbsp;&nbsp; h1=[n/2], а hi=h((i-1)/2).</p>

<p class=a>В более поздних работах Хиббард показал, что для ускорения процесса
целесообразно определить шаг h1 по формуле:<br>
h1=2**k+1 , где 2**k &lt; n &lt;= 2**(k+1).</p>

<p class=a>После выбора h1 методом вставки упорядочиваются группы, содержащие
элементы с номерами позиций</p>

<p class=a>&nbsp;&nbsp;&nbsp; i, i+h1, i+2*h1, ..., i+mi*h1.</p>

<p class=a>При этом i=1,2,...,h1; m[i] - наибольшее целое, удовлетворяющее
неравенству i+m[i]*hi &lt;= n.<br>
Затем выбирается шаг h2&lt;<span class=GramE>h1</span> и упорядочиваются
группы, содержащие элементы с номерами позиций i, i+h2, ..., i+m[i]*h2. Эта
процедура <span class=GramE>со</span> все уменьшающимися шагами продолжается до
тех пор, пока очередной шаг h[l] станет равным единице (h1&gt;h2&gt;...&gt;hl).
Этот последний этап представляет собой упорядочение всей таблицы методом
вставки. Но так как исходная таблица упорядочивалась отдельными группами с
последовательным объединением этих групп, то общее количество сравнений
значительно меньше,&nbsp;&nbsp;&nbsp;&nbsp; чем n /4, требуемое при методе
вставки. Число операций сравнения пропорционально n*(log2(n))**2 .</p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>#</span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>include</span><span
style='font-size:10.0pt;font-family:"Courier New"'>&lt;</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>stdio</span><span
style='font-size:10.0pt;font-family:"Courier New"'>.</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>h</span><span
style='font-size:10.0pt;font-family:"Courier New"'>&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>#define <span
class=GramE>swap(</span>a,b) { int tmp; tmp=a; a=b; b=tmp; }<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>main()</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>{<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span class=GramE>int</span> a[10], dim=10;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span class=GramE>int</span> i, j, gap;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span></span><span lang=PT-BR style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'>for
(i=0;i&lt;dim;i++)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>    </span>{<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:2'>          </span>printf(&quot;</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>Элемент</span><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
PT-BR'>\n&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:2'>          </span>scanf(&quot;%d&quot;,&amp;a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>    </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>    </span>printf(&quot;</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>Было</span><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
PT-BR'>\n&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=PT-BR style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:PT-BR'><span
style='mso-tab-count:1'>    </span></span><span class=GramE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'> (i=0;i&lt;dim; i++)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>          </span><span class=GramE>printf(</span>&quot;%d\n&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span class=GramE>for</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'> (</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>gap</span><span
style='font-size:10.0pt;font-family:"Courier New"'> = </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>dim</span><span
style='font-size:10.0pt;font-family:"Courier New"'>/2; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>gap</span><span
style='font-size:10.0pt;font-family:"Courier New"'> &gt; 0; </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>gap</span><span style='font-size:10.0pt;font-family:"Courier New"'>/=2)<span
style='mso-spacerun:yes'>  </span>/* Выбор интервала */ <o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>for</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> (i = gap;i &lt; dim; i++)<span
style='mso-spacerun:yes'>       </span>/* Проход массива */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span></span><span style='font-size:10.0pt;
font-family:"Courier New"'>/* Сравнение пар, отстоящих на </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>gap</span><span style='font-size:10.0pt;font-family:"Courier New"'> друг
от друга */<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-tab-count:1'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>for</span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'> (j = i-gap; j &gt;=
0<span style='mso-spacerun:yes'>  </span>&amp;&amp; a[j] &gt; a[j+gap]; j -=
gap) swap(a[j], a[j+gap]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span class=GramE>printf(</span>&quot;</span><span
style='font-size:10.0pt;font-family:"Courier New"'>Стало</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>\n&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span class=GramE>for</span> (i=0;i&lt;dim; i++)<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:2'>          </span><span class=GramE>printf(</span>&quot;%d\n&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<pre><o:p>&nbsp;</o:p></pre>

<p class=a4 style='margin-top:0in'><b style='mso-bidi-font-weight:normal'>Пирамидальная
сортировка<o:p></o:p></b></p>

<p class=a4 style='margin-top:0in'><o:p>&nbsp;</o:p></p>

<p class=a4 style='margin-top:0in'><span lang=PT-BR style='mso-ansi-language:
PT-BR'><span style='mso-spacerun:yes'>          </span></span>Геометрическая
интерпретация пирамиды:</p>

<pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>                      </span>h1</pre><pre><span style='mso-spacerun:yes'>                     </span>/<span style='mso-spacerun:yes'>  </span>\</pre><pre><span style='mso-spacerun:yes'>                    </span>/<span style='mso-spacerun:yes'>    </span>\</pre><pre><span style='mso-spacerun:yes'>                   </span>/<span style='mso-spacerun:yes'>      </span>\</pre><pre><span style='mso-spacerun:yes'>                  </span>/<span style='mso-spacerun:yes'>        </span>\</pre><pre><span style='mso-spacerun:yes'>                 </span>/<span style='mso-spacerun:yes'>          </span>\</pre><pre><span style='mso-spacerun:yes'>               </span>h2<span style='mso-spacerun:yes'>            </span>h3</pre><pre><span style='mso-spacerun:yes'>              </span><span
lang=PT-BR style='mso-ansi-language:PT-BR'>/ \<span style='mso-spacerun:yes'>   </span><span style='mso-spacerun:yes'>         </span>/ \<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>             </span>/<span style='mso-spacerun:yes'>   </span>\<span style='mso-spacerun:yes'>          </span>/<span style='mso-spacerun:yes'>   </span>\<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>           </span>h4<span style='mso-spacerun:yes'>    </span>h5<span style='mso-spacerun:yes'>       </span>h6<span style='mso-spacerun:yes'>     </span>h7<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>          </span>/<span style='mso-spacerun:yes'>  </span>\<span style='mso-spacerun:yes'>  </span>/<span style='mso-spacerun:yes'>  </span>\<span style='mso-spacerun:yes'>     </span>/ \<span style='mso-spacerun:yes'>   </span>/<span style='mso-spacerun:yes'>  </span>\<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>         </span>h8<span style='mso-spacerun:yes'>  </span>h9 h10 h11<span style='mso-spacerun:yes'>  </span>h12 h13 h14 h15<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></pre>

<p class=a4 style='margin-top:0in'><span lang=PT-BR style='mso-ansi-language:
PT-BR'><span style='mso-spacerun:yes'>      </span></span>Для
последовательности 06 42 12 55 94 18 44</p>

<p class=a4 style='margin-top:0in'><o:p>&nbsp;</o:p></p>

<pre><span style='mso-spacerun:yes'>                      </span>06</pre><pre><span style='mso-spacerun:yes'>                   </span><span style='mso-spacerun:yes'>  </span>/<span style='mso-spacerun:yes'>  </span>\</pre><pre><span style='mso-spacerun:yes'>                    </span>/<span style='mso-spacerun:yes'>    </span>\</pre><pre><span style='mso-spacerun:yes'>                   </span>/<span style='mso-spacerun:yes'>      </span>\</pre><pre><span style='mso-spacerun:yes'>                  </span>/<span style='mso-spacerun:yes'>        </span>\</pre><pre><span style='mso-spacerun:yes'>                 </span>/<span style='mso-spacerun:yes'>          </span>\</pre><pre><span style='mso-spacerun:yes'>               </span>42<span style='mso-spacerun:yes'>            </span>12</pre><pre><span style='mso-spacerun:yes'>              </span>/ \<span style='mso-spacerun:yes'>            </span>/ \</pre><pre><span style='mso-spacerun:yes'>             </span>/<span style='mso-spacerun:yes'>   </span>\<span style='mso-spacerun:yes'>          </span>/<span style='mso-spacerun:yes'>   </span>\</pre><pre><span style='mso-spacerun:yes'>           </span>55<span style='mso-spacerun:yes'>    </span>94<span style='mso-spacerun:yes'>        </span>18<span style='mso-spacerun:yes'>   </span>44</pre><pre><o:p>&nbsp;</o:p></pre>

<p class=a4 style='margin-top:0in'><span
style='mso-spacerun:yes'>                  </span>Добавление элемента в готовую
пирамиду</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>         
</span>1. Новый элемент Х помещаем в вершину дерева.</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>         
</span>2. Смотрим на элемент слева и элемент справа – выбираем<span
style='mso-spacerun:yes'>      </span>наименьший.</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>         
</span>3. Если этот элемент меньше Х - меняем их местами и идем у<span
style='mso-spacerun:yes'>      </span>шагу 2. Иначе конец процедуры.</p>

<p class=a4 style='margin-top:0in'><span
style='mso-spacerun:yes'>                        </span>Фаза 1: построение
пирамиды</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>         
</span>Пусть дан массив h1 ... hn . Ясно, что элементы hn/2 + 1<span
style='mso-spacerun:yes'>      </span>... hn уже образуют 'нижний ряд'
пирамиды, так как не существует индексов i , j<span class=GramE> :</span> j = 2*i
( или j = 2*i + 1 ). То есть тут упорядочивания не требуется.</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>         
</span>На каждом шаге добавляется новый элемент слева и<span
style='mso-spacerun:yes'>  </span>'просеивается' на место. Вот иллюстрация
процесса для пирамиды из 8-и элементов:</p>

<p class=a4 style='margin-top:0in'><o:p>&nbsp;</o:p></p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>    
</span>44<span style='mso-spacerun:yes'>  </span>55<span
style='mso-spacerun:yes'>  </span>12<span style='mso-spacerun:yes'> 
</span>42<span style='mso-spacerun:yes'>  </span>//<span
style='mso-spacerun:yes'>  </span>94<span style='mso-spacerun:yes'> 
</span>18<span style='mso-spacerun:yes'>  </span>06<span
style='mso-spacerun:yes'>  </span>67</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>    
</span>44<span style='mso-spacerun:yes'>  </span>55<span
style='mso-spacerun:yes'>  </span>12<span style='mso-spacerun:yes'> 
</span>//<span style='mso-spacerun:yes'>  </span>42<span
style='mso-spacerun:yes'>  </span>94<span style='mso-spacerun:yes'> 
</span>18<span style='mso-spacerun:yes'>  </span>06<span
style='mso-spacerun:yes'>  </span>67</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>    
</span>44<span style='mso-spacerun:yes'>  </span>55<span
style='mso-spacerun:yes'>  </span>//<span style='mso-spacerun:yes'> 
</span>06<span style='mso-spacerun:yes'>  </span>42<span
style='mso-spacerun:yes'>  </span>94<span style='mso-spacerun:yes'> 
</span>18<span style='mso-spacerun:yes'>  </span>12<span
style='mso-spacerun:yes'>  </span>67</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>    
</span>44<span style='mso-spacerun:yes'>  </span>//<span
style='mso-spacerun:yes'>  </span>42<span style='mso-spacerun:yes'> 
</span>06<span style='mso-spacerun:yes'>  </span>55<span
style='mso-spacerun:yes'>  </span>94<span style='mso-spacerun:yes'> 
</span>18<span style='mso-spacerun:yes'>  </span>12<span
style='mso-spacerun:yes'>  </span>67</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>    
</span>//<span style='mso-spacerun:yes'>  </span>06<span
style='mso-spacerun:yes'>  </span>42<span style='mso-spacerun:yes'> 
</span>12<span style='mso-spacerun:yes'>  </span>55<span
style='mso-spacerun:yes'>  </span>94<span style='mso-spacerun:yes'> 
</span>18<span style='mso-spacerun:yes'>  </span>44<span
style='mso-spacerun:yes'>  </span>67</p>

<p class=a4 style='margin-top:0in'><o:p>&nbsp;</o:p></p>

<p class=a4 style='margin-top:0in'><span
style='mso-spacerun:yes'>                            </span>Фаза 2: сортировка</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>         
</span>Для того<span class=GramE>,</span> чтобы рассортировать элементы, необходимо
выполнить n шагов просеивания: после каждого шага очередной элемент берется с
вершины пирамиды. На каждом шаге берем последний элемент Х, верхний элемент
пирамиды помещается на его<span style='mso-spacerun:yes'>  </span>место, а Х
просеивается на свое 'законное'. В этом случае необходимо совершить n - 1
шагов. Пример:</p>

<p class=a4 style='margin-top:0in'><o:p>&nbsp;</o:p></p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>06<span style='mso-spacerun:yes'>  </span>42<span
style='mso-spacerun:yes'>  </span>12<span style='mso-spacerun:yes'> 
</span>55<span style='mso-spacerun:yes'>  </span>94<span
style='mso-spacerun:yes'>  </span>18<span style='mso-spacerun:yes'> 
</span>44<span style='mso-spacerun:yes'>  </span>67<span
style='mso-spacerun:yes'>  </span>//</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>12<span style='mso-spacerun:yes'>  </span>42<span
style='mso-spacerun:yes'>  </span>18<span style='mso-spacerun:yes'> 
</span>55<span style='mso-spacerun:yes'>  </span>94<span
style='mso-spacerun:yes'>  </span>67<span style='mso-spacerun:yes'> 
</span>44<span style='mso-spacerun:yes'>  </span>//<span
style='mso-spacerun:yes'>  </span>06</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>18<span style='mso-spacerun:yes'>  </span>42<span
style='mso-spacerun:yes'>  </span>44<span style='mso-spacerun:yes'> 
</span>55<span style='mso-spacerun:yes'>  </span>94<span
style='mso-spacerun:yes'>  </span>67<span style='mso-spacerun:yes'> 
</span>//<span style='mso-spacerun:yes'>  </span>12<span
style='mso-spacerun:yes'>  </span>06</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>42<span style='mso-spacerun:yes'>  </span>55<span
style='mso-spacerun:yes'>  </span>44<span style='mso-spacerun:yes'> 
</span>67<span style='mso-spacerun:yes'>  </span>94<span
style='mso-spacerun:yes'>  </span>//<span style='mso-spacerun:yes'> 
</span>18<span style='mso-spacerun:yes'>  </span>12<span
style='mso-spacerun:yes'>  </span>06</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>44<span style='mso-spacerun:yes'>  </span>55<span
style='mso-spacerun:yes'>  </span>94<span style='mso-spacerun:yes'> 
</span>67<span style='mso-spacerun:yes'>  </span>//<span
style='mso-spacerun:yes'>  </span>42<span style='mso-spacerun:yes'> 
</span>18<span style='mso-spacerun:yes'>  </span>12<span
style='mso-spacerun:yes'>  </span>06</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>55<span style='mso-spacerun:yes'>  </span>67<span
style='mso-spacerun:yes'>  </span>94<span style='mso-spacerun:yes'>  </span>//<span
style='mso-spacerun:yes'>  </span>44<span style='mso-spacerun:yes'> 
</span>42<span style='mso-spacerun:yes'>  </span>18<span
style='mso-spacerun:yes'>  </span>12<span style='mso-spacerun:yes'>  </span>06</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>67<span style='mso-spacerun:yes'>  </span>94<span
style='mso-spacerun:yes'>  </span>//<span style='mso-spacerun:yes'> 
</span>55<span style='mso-spacerun:yes'>  </span>44<span
style='mso-spacerun:yes'>  </span>42<span style='mso-spacerun:yes'> 
</span>18<span style='mso-spacerun:yes'>  </span>12<span
style='mso-spacerun:yes'>  </span>06</p>

<p class=a4 style='margin-top:0in'><span style='mso-spacerun:yes'>     
</span>94<span style='mso-spacerun:yes'>  </span>//<span
style='mso-spacerun:yes'>  </span>67<span style='mso-spacerun:yes'> 
</span>55<span style='mso-spacerun:yes'>  </span>44<span
style='mso-spacerun:yes'>  </span>42<span style='mso-spacerun:yes'> 
</span>18<span style='mso-spacerun:yes'>  </span>12<span
style='mso-spacerun:yes'>  </span>06</p>

<p class=a style='margin-top:0in'>Получили отсортированную последовательность,
только в обратном порядке.<span style='mso-spacerun:yes'>         
</span>Прекрасной характеристикой этого метода является то, что<span
style='mso-spacerun:yes'>  </span>среднее число пересылок - (n*log n)/2 и
отклонения от этого значения сравнительно малы.</p>

<p class=a style='margin-top:0in'>{ сортируем массив типа 'item' по ключу
'a.key'<span class=GramE> }</span></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto'><b
style='mso-bidi-font-weight:normal'><span style='font-size:10.0pt;color:black'>Распределяющая
сортировка</span></b><span style='font-size:10.0pt;color:black'>. <o:p></o:p></span></p>

<p class=a>Для реализации распределяющей сортировки выполняется процедура,
состоящая из двух процессов, называемых распределение и сборка для j=1,2,...,T.
</p>

<p class=a>PАСПРЕДЕЛЕНИЕ заключается в том, что элемент Кi (i=1,N) из<span
class=GramE> В</span> добавляется как последний в список Bm, где m=D(j,Ki), и
таким образом получаем десять списков, в каждом из которых j-тые разряды чисел
одинаковы и равны m. </p>

<p class=a>СБОРКА объединяет списки В<span class=GramE>0</span>,В1,...,В9 в
этом же порядке, образуя один список В. </p>

<p class=a>Рассмотрим реализацию распределяющей сортировки при Т=2 для списка:
B=&lt;09,07,18,03,52,04,06,08,05,13,42,30,35,26&gt; . </p>

<p class=a><span style='mso-spacerun:yes'>               
</span>РАСПРЕДЕЛЕНИЕ-1:</p>

<p class=a><span style='mso-spacerun:yes'>     </span>B0=&lt;30&gt;,<span
style='mso-spacerun:yes'>  </span>B1=&lt;&gt;,<span style='mso-spacerun:yes'> 
</span>B2=&lt;52,42&gt;, B3=&lt;03,13&gt;, B4=&lt;04&gt;,</p>

<p class=a><span style='mso-spacerun:yes'>     </span>B5=&lt;05,35&gt;,<span
style='mso-spacerun:yes'>  </span>B6=&lt;06,26&gt;,B7=&lt;07&gt;,
B8=&lt;18,08&gt;, B9=&lt;09&gt;.</p>

<p class=a><span style='mso-spacerun:yes'>                </span>СБОРКА-1:</p>

<p class=a><span style='mso-spacerun:yes'>    
</span>B=&lt;30,52,42,03,13,04,05,35,06,26,07,18,08,09&gt;</p>

<p class=a><span style='mso-spacerun:yes'>               
</span>РАСПРЕДЕЛЕНИЕ-2:</p>

<p class=a><span style='mso-spacerun:yes'>    
</span>B0=&lt;03,04,05,06,07,08,09&gt;, B1=&lt;13,18&gt;, B2=&lt;26&gt;,</p>

<p class=a><span style='mso-spacerun:yes'>     </span>B3=&lt;30,35&gt;,
B4=&lt;42&gt;, B5=&lt;52&gt;, B6=&lt;&gt;,B7=&lt;&gt;,B8=&lt;&gt;, B9=&lt;&gt;.</p>

<p class=a><span style='mso-spacerun:yes'>                </span>СБОРКА-2:</p>

<p class=a><span style='mso-spacerun:yes'>    
</span>B=&lt;03,04,05,06,07,08,09,13,18,26,30,35,42,52&gt;.</p>

<p class=a>Количество действий, необходимых для сортировки N T-цифровых чисел,
определяется как Q(N*T). Недостатком этого метода является необходимость
использования дополнительной памяти под карманы. </p>

<p class=a><span class=GramE>В представленной ниже программе функция pocket
реализует распределяющую сортировку связанного линейного списка (указатель q),
в котором содержатся Т-разрядные десятичные положительные числа, без
использования дополнительной памяти; в функции a[i], b[i] указывают
соответственно на первый и на последний элементы кармана Bi. </span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>     </span>/*<span style='mso-spacerun:yes'>  
</span>вызов<span style='mso-spacerun:yes'>  </span>распределяющ<span
class=GramE>e</span>й<span style='mso-spacerun:yes'>  </span>сортировки<span
style='mso-spacerun:yes'>  </span>списка<span style='mso-spacerun:yes'>   
</span>*/<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>     </span>#include<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>     </span>#include<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>     </span></span><span class=GramE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";color:black;mso-ansi-language:
EN-US'>typedef</span></span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";color:black;mso-ansi-language:EN-US'> struct str<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>  </span><span
style='mso-spacerun:yes'>   </span><span class=GramE>{ long</span> val;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span><span
class=GramE>struct</span> str *n; } SP1;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span><span
class=GramE>main()</span><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span><span
class=GramE>{ int</span> i;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span>SP1 *q=<span
class=GramE>malloc(</span>sizeof(SP1)),*r;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span>SP1 *<span
class=GramE>pocket(</span>SP1 * ,int );<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span>long
a[14]={ 0,7,18,3,52,4,6,8,5,13,42,30,35,26 };<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span></span><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'>q-&gt;n=NULL;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>      
</span>q-&gt;val=a[0];<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>       </span>r=q;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>       </span>printf(&quot;
%d&quot;,a[0]);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>      
</span>for(i=1;i&lt;14;i++) /* </span><span style='font-size:10.0pt;font-family:
"Courier New";color:black'>формирование</span><span style='font-size:10.0pt;
font-family:"Courier New";color:black;mso-ansi-language:PT-BR'> </span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>списка</span><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'> */ { r-&gt;n=malloc(sizeof(SP1));<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>            
</span>r-&gt;val=a[i];<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>            
</span>(r-&gt;n)-&gt;n=NULL;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>            
</span>r=r-&gt;n;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>            
</span>printf(&quot; %d&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>         </span></span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>       </span>r=pocket(q,2);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>       </span>printf(&quot;\n&quot;);<span
style='mso-spacerun:yes'>          </span>/*<span style='mso-spacerun:yes'> 
</span>печать результатов<span style='mso-spacerun:yes'>   </span>*/<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>       </span></span><span lang=PT-BR
style='font-size:10.0pt;font-family:"Courier New";color:black;mso-ansi-language:
PT-BR'>while (r!=NULL)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>         </span>{<span
style='mso-spacerun:yes'>   </span>printf(&quot; %d&quot;,r-&gt;val);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>             </span></span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>r=r-&gt;n;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>         </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>     </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>     </span>/*<span style='mso-spacerun:yes'>   
</span>распределяющая<span style='mso-spacerun:yes'>  </span>сортировка<span
style='mso-spacerun:yes'>  </span>списка<span
style='mso-spacerun:yes'>          </span>*/<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:"Courier New";color:black'><span
style='mso-spacerun:yes'>     </span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";color:black;mso-ansi-language:EN-US'>SP1 *<span
class=GramE>pocket(</span>SP1 *q,int t)<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span><span
class=GramE>{ int</span> i,j,k,m=1;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span><span
style='mso-spacerun:yes'>  </span>SP1 *r, *gg, *<span class=GramE>a[</span>10],
*b[10];<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span><span
class=GramE>gg=</span>q;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      
</span>for(j=1;j&lt;=t;j++) { for(i=&quot;0;i&lt;=9;i++)&quot;
a[i]=&quot;(b[i]=NULL);&quot; while(q!=&quot;NULL)&quot; {
k=&quot;((int)(q-&quot;&gt;val/m))%(int)10;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                
</span>r=b[k];<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                
</span><span class=GramE>if</span> (a[k]==NULL) a[k]=q;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                
</span></span><span lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";
color:black;mso-ansi-language:PT-BR'>else r-&gt;n=q;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>                
</span>r=b[k]=q;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>                
</span>q=q-&gt;n;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>                
</span>r-&gt;n=NULL;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>              </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>          
</span>for(i=0;i&lt;=9;i++) if (a[i]!=&quot;NULL)&quot; break;
q=&quot;a[i];&quot; r=&quot;b[i];&quot; for(k=&quot;i+1;k&lt;=9;k++)&quot;
if(a[k]!=&quot;NULL)&quot; { r-&gt;n=a[k];<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=PT-BR style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>                
</span></span><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
color:black;mso-ansi-language:EN-US'>r=b[k];<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
style='mso-spacerun:yes'>      </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>          
</span>m=m*10;<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>         </span>}<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span><span
class=GramE>return</span> (gg);<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";color:black;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span></span><span
style='font-size:10.0pt;font-family:"Courier New";color:black'>}<o:p></o:p></span></p>

<p class=a><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'>ПОРАЗРЯДНАЯ РАСПРЕДЕЛЯЮЩАЯ СОРТИРОВКА </i></b>работает с двумя
последовательностями целиком, не выделяя в нем групп. Слияние осуществляется
как обычно, путем выбора минимального из двух текущих элементов
последовательностей. Зато распределение происходит на первом шаге по значению
старшего значащего бита (0/1), и по значению каждого следующего бита на
очередном шаге.<span style='mso-spacerun:yes'>  </span></p>

<p class=a><o:p>&nbsp;</o:p></p>

<pre><span style='font-size:11.0pt'>//----- <b style='mso-bidi-font-weight:
normal'>Поразрядная распределяющая сортировка<o:p></o:p></b></span></pre><pre> #<span
lang=EN-US style='mso-ansi-language:EN-US'>define</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>MAXINT</span> 0<span lang=EN-US
style='mso-ansi-language:EN-US'>x</span>7<span lang=EN-US style='mso-ansi-language:
EN-US'>FFF</span></pre><pre> <span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>void</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> sort(int in[], int n)<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'> {<span class=GramE>int</span> m,i,max,i0,i1;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'> <span class=GramE>int</span> *v0=new int[n];<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'> <span class=GramE>int</span> *v1=new int[n];<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'> </span>for (i=0, max=0; i max) max=in[i];<span style='mso-spacerun:yes'>         </span>// Определение <span
class=GramE>максимального</span></pre><pre> for (m=1; m &lt;=max; m &lt;&lt;=1);<span style='mso-spacerun:yes'>                      </span>// значащего разряда</pre><pre><span style='mso-spacerun:yes'>      </span>for (m &gt;&gt;=1; m<span
class=GramE> !</span>=0; m &gt;&gt;=1){<span style='mso-spacerun:yes'>    </span>// По всем разрядам от старшего</pre><pre><span style='mso-spacerun:yes'>      </span>for (i0=i1=0; i0+i1 &lt; n;<span
class=GramE> )</span><span style='mso-spacerun:yes'>          </span>// Распределение по значению</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> ((in[i0+i1] &amp; m) ==0)<span style='mso-spacerun:yes'>                   </span>// </span>очередного<span
style='mso-ansi-language:EN-US'> </span>разряда<span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span><span
class=GramE>v0[</span>i0] = in[i0+i1], i0++;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span><span
class=GramE>else</span><o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-tab-count:1'>        </span><span style='mso-spacerun:yes'>   </span><span
class=GramE>v1[</span>i1] = in[i0+i1], i1++;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span><span style='mso-spacerun:yes'> </span><span
class=GramE>v0[</span>i0] = v1[i1] = MAXINT;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span></span>for (i0=i1=0; i0+i1 &lt; n;<span
class=GramE> )</span><span style='mso-spacerun:yes'>      </span>// Слияние по обычному сравнению</pre><pre><span style='mso-spacerun:yes'>      </span>if (v0[i0] &lt; v1[i1])<span style='mso-spacerun:yes'>           </span>// значений в последовательностях</pre><pre><span style='mso-spacerun:yes'>      </span><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>in[</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>i0+i1] = v0[i0], i0++;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span><span
class=GramE>else</span><o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><span style='mso-tab-count:1'>        </span><span style='mso-spacerun:yes'>   </span><span
class=GramE>in[</span>i0+i1] = v1[i1], i1++;<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span>} delete v0; delete <span
class=GramE>v1;</span>}<o:p></o:p></span></pre><pre><span lang=EN-US
style='mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'>#include <o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> main(){<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'>int a[]={4,7,3,4,18,2,3,16,6,114,9,2,3};<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>sort(</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></pre>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>for</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>puts</span><span style='font-size:10.0pt;font-family:"Courier New"'>(</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'>&quot;&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<h3><span style='font-size:10.0pt'>Сортировка слиянием </span><span
style='font-size:10.0pt;font-family:"Times New Roman CYR"'><o:p></o:p></span></h3>

<p class=a><span style='mso-spacerun:yes'> </span>Сортировка слиянием
предполагает последовательный доступ к элементам сортируемых
последовательностей. <b style='mso-bidi-font-weight:normal'><i
style='mso-bidi-font-style:normal'>ОДНОКРАТНОЕ СЛИЯНИЕ</i></b>. </p>

<p class=a>Очевидно, что если из упорядоченных последовательностей брать по
одному очередному элементу из каждой, затем выбирать из них минимальный и
переносить его, то выходная последовательность будет упорядоченной. Отсюда
возможен самый простой способ однократного слияния: массив разбивается на <span
lang=EN-US style='mso-ansi-language:EN-US'>n</span><span lang=EN-US> </span>частей,
каждая из них сортируется независимо, а затем отсортированные части
объединяются<span style='mso-spacerun:yes'>  </span>слиянием. </p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New"'> </span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>sort</span><span style='font-size:10.0pt;
font-family:"Courier New"'>(</span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>int</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New"'> </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>a</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[], </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'> </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>n</span><span style='font-size:10.0pt;font-family:"Courier New"'>); //
любая сортировка одномерного массива<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'> </span></span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>#define N 4<span style='mso-tab-count:4'>                      </span>//
Количество массивов<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>void</span> big_sort(int
A[], int n){<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>int</span></span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'> </span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>B</span><span style='font-size:10.0pt;font-family:"Courier New"'>[</span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>N</span><span style='font-size:10.0pt;font-family:"Courier New"'>][10];<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'> </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>int</span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New"'> </span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>i</span><span
style='font-size:10.0pt;font-family:"Courier New"'>,</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>,</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>m</span><span
style='font-size:10.0pt;font-family:"Courier New"'> = </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>n</span><span
style='font-size:10.0pt;font-family:"Courier New"'>/</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>N</span><span
style='font-size:10.0pt;font-family:"Courier New"'>;<span
style='mso-spacerun:yes'>           </span><span style='mso-tab-count:4'>                       </span>//
Размерность массивов<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'> </span></span><span
class=GramE><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>for</span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'> (i=0; i&lt;n; i++)
B[i/m][i%m]=A[i];<span style='mso-spacerun:yes'>           </span>//
Распределение<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'> </span><span class=GramE>for</span> (i=0; i&lt;N;
i++) sort(B[i],10);<span style='mso-spacerun:yes'>              </span>//
Сортировка частей<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span style='mso-spacerun:yes'>  </span><span
class=GramE>for</span> (i=0; i&lt;n; i++){<span
style='mso-spacerun:yes'>                               </span>// Слияние<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span style='mso-spacerun:yes'>  </span><span
class=GramE>for</span></span><span style='font-size:10.0pt;font-family:"Courier New"'>
( </span><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New";
mso-ansi-language:EN-US'>int</span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New"'> </span><span lang=EN-US style='font-size:10.0pt;
font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>=0, </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>=0; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>&lt;</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>N</span><span
style='font-size:10.0pt;font-family:"Courier New"'>; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>++)<span
style='mso-spacerun:yes'>    </span>// Индекс строки с минимальным<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-tab-count:1'>    </span><span
style='mso-spacerun:yes'>  </span></span><span class=GramE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'> (B[j][0] &lt; B[k][0]) k=j;<span
style='mso-spacerun:yes'>                           </span>// B[k][0]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'><span
style='mso-tab-count:1'>    </span><span style='mso-spacerun:yes'>  </span>A</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>i</span><span
style='font-size:10.0pt;font-family:"Courier New"'>] = </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>B</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
class=GramE><span style='font-size:10.0pt;font-family:"Courier New"'>][</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'>0];<span
style='mso-spacerun:yes'>                              </span>// Слияние
элемента<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-tab-count:1'>    </span><span
style='mso-spacerun:yes'>  </span></span><span class=GramE><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>for</span></span><span
style='font-size:10.0pt;font-family:"Courier New"'> (</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>=1; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>&lt;</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>m</span><span
style='font-size:10.0pt;font-family:"Courier New"'>; </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>++) </span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>B</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>][</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>-1]=</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>B</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
style='font-size:10.0pt;font-family:"Courier New"'>] [</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>j</span><span
style='font-size:10.0pt;font-family:"Courier New"'>]; // ‘&uml;Сдвиг сливаемой
строки<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-tab-count:1'>    </span><span
style='mso-spacerun:yes'>  </span></span><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>B</span><span
style='font-size:10.0pt;font-family:"Courier New"'>[</span><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>k</span><span
class=GramE><span style='font-size:10.0pt;font-family:"Courier New"'>][</span></span><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>m</span><span style='font-size:10.0pt;font-family:"Courier New"'>-1]=10000;<span
style='mso-spacerun:yes'>                          </span>// Запись
ограничителя<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><span style='mso-tab-count:1'>    </span><span
style='mso-spacerun:yes'>  </span>}}<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>void</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span lang=EN-US style='font-size:
10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>int
a[]={4,7,3,4,8,2,3,6,6,4,9,2};<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>int</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>sort(</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>for</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d
&quot;,a[i]);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><span class=GramE><span
lang=EN-US style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:
EN-US'>puts(</span></span><span lang=EN-US style='font-size:10.0pt;font-family:
"Courier New";mso-ansi-language:EN-US'>&quot;&quot;);<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:9.0pt'><u><span lang=EN-US
style='font-size:10.0pt;font-family:"Courier New";mso-ansi-language:EN-US'>}<o:p></o:p></span></u></p>

<pre><span lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span>/*<span style='mso-spacerun:yes'>    </span></span>рекурсивная<span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>   </span></span>сортировка<span
style='mso-ansi-language:EN-US'> </span><span class=GramE>слиянием<span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>  </span>1</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>/2<span style='mso-spacerun:yes'>           </span>*/<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span><span
class=GramE>double</span> *srecmg (double *a, int m, int n)<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span><span
class=GramE>{ double</span> * merge (double *, int, int, int);<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span><span
class=GramE>double</span> * smerge (double *, int, int);<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span></span><span
lang=PT-BR style='mso-ansi-language:PT-BR'>int i;<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>       </span>if (n&gt;m)<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>          </span>{ i=(n+m)/2;<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>            </span>srecmg(a,m,i);<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>            </span>srecmg(a,i+1,n);<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>            </span>merge(a,m,n,(n-m)/2+1);<o:p></o:p></span></pre><pre><span
lang=PT-BR style='mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>          </span></span>}</pre><pre><span style='mso-spacerun:yes'>       </span>return (a);</pre><pre><span style='mso-spacerun:yes'>     </span>}</pre>

<p class=MsoNormal style='text-indent:9.0pt'><span style='font-size:10.0pt;
font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>

<p class=a><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'>ЦИКЛИЧЕСКОЕ СЛИЯНИЕ. <o:p></o:p></i></b></p>

<p class=a>Первоначально массив разделяется на n последовательностей. Затем в
каждой из них выбирается по одному элементу (первому) в таком порядке, чтобы
получилась упорядоченная группа из n элементов, которая запоминается в выходной
последовательности (слияние). Выходная последовательность будет состоять из
групп по n элементов, каждая из которых упорядочена. Далее файл опять
распределяется, но уже группами по n элементов по тем же самым n входным
последовательностям. В результате слияния образуются упорядоченные группы из
n*n элементов. Затем процесс повторяется группами по n*n*n и т.д<span
class=GramE>.. </span>В качестве примера рассмотрим случай с n=2 (двухпутевое
слияние). Для простоты будем считать размерность сортируемого массива кратной
2. </p>

<p class=MsoNormal><b><span style='font-family:"Courier New CYR"'><o:p>&nbsp;</o:p></span></b></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> sort(int in[],int n, int v1[], int
v2[])<o:p></o:p></span></p>

<p class=a0>{</p>

<p class=a0>int<span style='mso-tab-count:1'>   </span>step,m,k0;</p>

<p class=a0>for (m=n; m!=1; m/=2)<span style='mso-tab-count:2'>        </span> <span
style='mso-tab-count:1'>     </span>// Проверка на степень 2</p>

<p class=a0><span style='mso-spacerun:yes'>    </span><span class=GramE><span
lang=EN-US style='mso-ansi-language:EN-US'>if</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> (m%2 !=0) return;<o:p></o:p></span></p>

<p class=a0><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (step=1 step &lt;n; step *=2) <span
style='mso-tab-count:1'>    </span>// </span>Слияние<span style='mso-ansi-language:
EN-US'> </span>группами<span style='mso-ansi-language:EN-US'> </span>по<span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'>{<span style='mso-tab-count:5'>                            </span>//
step = 1,2,4...n/2<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>for</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> (k0=0; k0 &lt; n/2; k0 += step)<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span style='font-family:"Courier New"'>//
</span>Распределить in[], начиная с 2*k0, групп<span class=GramE>y</span> по
step</p>

<p class=a0><span style='mso-tab-count:1'>      </span><span style='font-family:
"Courier New"'>// </span>элементов в v1 и в v2, начиная с k0</p>

<p class=a0 style='text-indent:.5in'><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>for</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> (k0=0; k0 &lt; n; k0 += step*2)<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span style='font-family:"Courier New"'>//
</span>&quot;Слить&quot; по step элементов из v1 и v2, начиная с k0,</p>

<p class=a0><span style='mso-tab-count:1'>      </span>// в in[], начиная с
2*k0</p>

<p class=a0><span style='mso-spacerun:yes'>    </span>}</p>

<p class=a0>}</p>

<p class=a0 style='text-indent:.5in'><o:p>&nbsp;</o:p></p>

<p class=a0 style='text-indent:.5in'><o:p>&nbsp;</o:p></p>

<p class=a0 style='text-indent:.5in'>//------ )Циклическое двухпутевое слияние <span
class=GramE>( </span><span lang=EN-US style='mso-ansi-language:EN-US'>n</span>
равно степени 2)</p>

<p class=a0 style='text-indent:.5in'><span style='mso-spacerun:yes'>  </span><span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> sort(int A[], int n){<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'> </span><span class=GramE>int</span>
B1[100],B2[100];<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'> </span><span class=GramE>int</span>
i,i1,i2,s,a1,a2,a,k;<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>      </span><span class=GramE>for</span>
(s=1; s!=n; s*=2){<span style='mso-spacerun:yes'>                 </span>// Размер
группы кратен 2<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>      </span><span class=GramE>for</span>
(i=0; i&lt;n/2; i++)<span style='mso-spacerun:yes'>                     
</span>//<span style='mso-spacerun:yes'>  </span>Разделить пополам <o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>           </span><span class=GramE>{ B1</span>[i]=A[i];
B2[i]=A[i+n/2]; }<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>      </span>i1=i2=0;<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>   </span><span class=GramE>for</span> (i=0,k=0; i&lt;n;
i++){ // </span>Слияние<span style='mso-ansi-language:EN-US'> </span>с<span
style='mso-ansi-language:EN-US'> </span>переходом<span lang=EN-US
style='mso-ansi-language:EN-US'> &quot; </span>скачком<span lang=EN-US
style='mso-ansi-language:EN-US'>&quot;<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>   </span><span class=GramE>if</span> (i1==s
&amp;&amp; i2==s)<span style='mso-spacerun:yes'>          </span>// &macr;</span>при<span
style='mso-ansi-language:EN-US'> </span>достижении<span style='mso-ansi-language:
EN-US'> </span>границ<span style='mso-ansi-language:EN-US'> </span>обеих<span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>   </span>k+=s<span class=GramE>,i1</span>=0,i2=0;<span
style='mso-spacerun:yes'>                                    </span>//
&macr;&macr;групп<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>   </span><span class=GramE>if</span> (i1==s)
A[i]=B2[k+i2++];<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>   </span><span class=GramE>else</span></span><span
style='mso-spacerun:yes'>             </span><span
style='mso-spacerun:yes'>         </span>// 4 условия слияния по окончании</p>

<p class=a0 style='text-indent:.5in'><span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>   </span><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>if</span></span> (<span lang=EN-US
style='mso-ansi-language:EN-US'>i</span>2==<span lang=EN-US style='mso-ansi-language:
EN-US'>s</span>) <span lang=EN-US style='mso-ansi-language:EN-US'>A</span>[<span
lang=EN-US style='mso-ansi-language:EN-US'>i</span>]=<span lang=EN-US
style='mso-ansi-language:EN-US'>B</span>1[<span lang=EN-US style='mso-ansi-language:
EN-US'>k</span>+<span lang=EN-US style='mso-ansi-language:EN-US'>i</span>1++];</p>

<p class=a0 style='text-indent:.5in'><span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>   </span><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>else</span></span><span
style='mso-spacerun:yes'>                                </span>// групп и по
сравнению</p>

<p class=a0 style='text-indent:.5in'><span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>   </span><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>if</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> (B1[k+i1 ] &lt; B2[k+i2 ]) A[i]=B1[k+i1++];<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-tab-count:2'>            </span><span
style='mso-spacerun:yes'>   </span><span class=GramE>else</span>
A[i]=B2[k+i2++];<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>           </span>}}}<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'><o:p>&nbsp;</o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'>#include &lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>void</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> main(){<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span lang=EN-US style='mso-ansi-language:
EN-US'>int a[]={4,7,3,4,8,2,3,6,6,4,9,2,7,7,6,2};<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>int</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> n=sizeof(a)/sizeof(int);<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>sort(</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'>a,n);<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>for</span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> (int i=0; i&lt;n; i++) printf(&quot;%d &quot;,a[i]);<o:p></o:p></span></p>

<p class=a0 style='text-indent:.5in'><span class=GramE><span lang=EN-US
style='mso-ansi-language:EN-US'>puts</span>(</span>&quot;&quot;);</p>

<p class=a0 style='text-indent:.5in'>}</p>

<pre><b style='mso-bidi-font-weight:normal'><span style='font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></b></pre><pre><b
style='mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></b></pre><pre><b
style='mso-bidi-font-weight:normal'><span style='font-family:"Times New Roman"'>Внешняя сортировка. Многофазная сортировка файла<o:p></o:p></span></b></pre><pre><o:p>&nbsp;</o:p></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>Этот тип сортировки относится к так называемым 'сортировкам слиянием'. Слиянием называется процесс объединения нескольких упорядоченных серий в одну.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'> Пример для 3-х серий, слияемых на 4-ю:<o:p></o:p></span></pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>    </span>3 7 9<span style='mso-spacerun:yes'>      </span>3 7 9<span style='mso-spacerun:yes'>        </span>3 7 9<span style='mso-spacerun:yes'>          </span>7 9<span style='mso-spacerun:yes'>             </span>7 9</pre><pre><span style='mso-spacerun:yes'>  </span>{ 2 4 6<span style='mso-spacerun:yes'>  </span>1 <span
class=GramE>{ </span>2 4 6<span style='mso-spacerun:yes'>  </span>1 2 { 4 6<span style='mso-spacerun:yes'>    </span>1 2 3 { 4 6<span style='mso-spacerun:yes'>   </span>1 2 3 4 { 6</pre><pre><span style='mso-spacerun:yes'>    </span>1 5 8<span style='mso-spacerun:yes'>      </span>5 8<span style='mso-spacerun:yes'>          </span>5 8<span style='mso-spacerun:yes'>            </span>5 8<span style='mso-spacerun:yes'>             </span>5 8</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>               </span>7 9<span style='mso-spacerun:yes'>                </span>7 9<span style='mso-spacerun:yes'>                 </span>9</pre><pre><span style='mso-spacerun:yes'>   </span>1 2 3 4 5 <span
class=GramE>{ </span>6<span style='mso-spacerun:yes'>    </span>1 2 3 4 5 6 { 8<span style='mso-spacerun:yes'>     </span>1 2 3 5 6 7 { 8<span style='mso-spacerun:yes'>   </span>1 2 3 4 5 6 7 8 9 {</pre><pre><span style='mso-spacerun:yes'>               </span>8</pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>   </span>Каждый <span
class=GramE>p</span>аз мы беpем свеpху наименьший элемент.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>Таким образом, каждая операция слияния серий требует n пересылок элементов, где n - общее число элементов серий.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>Пусть у нас имеется N лент: N - 1 входная и одна пустая. Мы будем слиять элементы <span
class=GramE>со</span> входных лент на выходную, пока какая-либо из них не опустеет. Затем она станет входной.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>Пример сортировки с шестью лентами, содержащими всего 65 серий. Серии обозначены буквами fi, в таблице - количество элементов.<o:p></o:p></span></pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>    </span>Тип<span style='mso-spacerun:yes'>     </span>f1<span style='mso-spacerun:yes'>      </span>f2<span style='mso-spacerun:yes'>     </span>f3<span style='mso-spacerun:yes'>     </span>f4<span style='mso-spacerun:yes'>     </span>f5<span style='mso-spacerun:yes'>      </span>f6</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>         </span><span style='mso-spacerun:yes'>   </span>16<span style='mso-spacerun:yes'>      </span>15<span style='mso-spacerun:yes'>     </span>14<span style='mso-spacerun:yes'>     </span>12<span style='mso-spacerun:yes'>     </span>8</pre><pre><span style='mso-spacerun:yes'>            </span>8<span style='mso-spacerun:yes'>       </span>7<span style='mso-spacerun:yes'>      </span>6<span style='mso-spacerun:yes'>      </span>4<span style='mso-spacerun:yes'>      </span>0<span style='mso-spacerun:yes'>       </span>8</pre><pre><span style='mso-spacerun:yes'>            </span>4<span style='mso-spacerun:yes'>       </span>3<span style='mso-spacerun:yes'>      </span>2<span style='mso-spacerun:yes'>      </span>0<span style='mso-spacerun:yes'>      </span>4<span style='mso-spacerun:yes'>       </span>4</pre><pre><span style='mso-spacerun:yes'>            </span>2<span style='mso-spacerun:yes'>       </span>1<span style='mso-spacerun:yes'>      </span>0<span style='mso-spacerun:yes'>      </span>2<span style='mso-spacerun:yes'>      </span>2<span style='mso-spacerun:yes'>       </span>2</pre><pre><span style='mso-spacerun:yes'>            </span>1<span style='mso-spacerun:yes'>       </span>0<span style='mso-spacerun:yes'>      </span>1<span style='mso-spacerun:yes'>      </span>1<span style='mso-spacerun:yes'>      </span>1<span style='mso-spacerun:yes'>       </span>1</pre><pre><span style='mso-spacerun:yes'>            </span>0<span style='mso-spacerun:yes'>     </span><span style='mso-spacerun:yes'>  </span>1<span style='mso-spacerun:yes'>      </span>0<span style='mso-spacerun:yes'>      </span>0<span style='mso-spacerun:yes'>      </span>0<span style='mso-spacerun:yes'>       </span>0</pre><pre><o:p>&nbsp;</o:p></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>В каждый момент времени слияние происходит на пустую ленту с остальных, поэтому число требующихся проходов приблизительно равно log N n. В данном примере распределение начальных серий <span
class=GramE>побрано</span> искусственно. Для идеальной сортировки исходные числа серий должны быть суммами n - 1 , n - 2 , ... , 1 последовательных чисел Фибоначчи порядка n - 2.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>Число Фибоначчи порядка p определяются следующим образом:<o:p></o:p></span></pre><pre> <span
class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>fi+</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>1(p) = fi(p) + fi-1(p) + ... + fi-p(p) </span>для<span
lang=EN-US style='mso-ansi-language:EN-US'> i &gt;=p,<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'> <span class=GramE>fp(</span>p) = 1,<o:p></o:p></span></pre><pre><span
lang=EN-US style='mso-ansi-language:EN-US'> <span class=GramE>fi(</span>p) = 0 </span>для<span
lang=EN-US style='mso-ansi-language:EN-US'> 0 &lt;= i &lt; p.<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-family:"Times New Roman";mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span></span><span
style='font-family:"Times New Roman"'>Очевидно, обычные числа Фибоначчи имеют порядок 1.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>Поэтому предположим существование фиктивных серий, <span
class=GramE>таких</span> что сумма фиктивных с реальными дает идеальное число.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>Сначала все данные располагаются на одной ленте. Лента читается и отрезки распределяются по другим лентам, имеющимся в системе<span
class=GramE>.</span> <span class=GramE>п</span>осле того, как созданы начальные отрезки, они сливаются, как описано выше. Один из методов, который можно использовать для создания начальных отрезков, состоит в чтении порции записей в память, их сортировке и записи результата на ленту. Выбор с замещением позволяет нам получать более длинные отрезки. Этот алгоритм работает с буфером, располагающимся в оперативной памяти. Сначала<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'> мы заполняем буфер. Затем повторяем следующие шаги до тех пор, пока не будут исчерпаны входные данные:<o:p></o:p></span></pre><pre><o:p>&nbsp;</o:p></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>    </span>* Выбрать запись с наименьшим ключом, т.е. с ключом, значение которого &gt;=<span style='mso-spacerun:yes'>      </span>значения ключа последней прочитанной записи.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>    </span>* Если все &quot;старые&quot; ключи меньше последнего ключа, то мы достигли конца<span style='mso-spacerun:yes'>      </span>отрезка. Выбираем запись с наименьшим ключом в качестве первого элемента следующего о</span>трезка.</pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>    </span>* Записываем выбранную запись.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>    </span>* Заменяем выбранную и записанную запись <span
class=GramE>на</span> новую из входного файла.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>На следующей таблице выбор с замещением иллюстрируются для совсем маленького файла.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>      </span>Начало файла - справа. Чтобы упростить пример, считается, что в буфер<span style='mso-spacerun:yes'>  </span>помещается всего лишь 2 записи. Конечно, в реальных задачах в буфер помещаются тысячи записей. Мы загружаем буфер на шаге<span
class=GramE> В</span> и записываем в выходной файл запись с наименьшим номером &gt;= 6 на шаге D. Ею оказалась запись с ключом 7. Теперь мы <span
class=GramE>заменяем ее на</span> новую запись из входного файла - с ключом 4. Процесс продолжается до шага F,<span style='mso-spacerun:yes'>  </span>где мы оказывается, что<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'> последний записанный ключ равен 8 и все ключи меньше 8. В этот момент мы заканчиваем формирование текущего отрезка и начинаем формирование следующего.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></pre><pre><span style='mso-spacerun:yes'>                      </span>Шаг<span style='mso-spacerun:yes'>    </span>Вход<span style='mso-spacerun:yes'>     </span>Буфер<span style='mso-spacerun:yes'>     </span>Выход</pre><pre><span style='mso-spacerun:yes'>                       </span>A<span style='mso-spacerun:yes'>  </span>5-3-4-8-6-7</pre><pre><span style='mso-spacerun:yes'>                       </span>B<span style='mso-spacerun:yes'>  </span>5-3-4-8<span style='mso-spacerun:yes'>     </span>6-7</pre><pre> <span style='mso-spacerun:yes'>                      </span>C<span style='mso-spacerun:yes'>  </span>5-3-4<span style='mso-spacerun:yes'>       </span>8-7<span style='mso-spacerun:yes'>   </span>6</pre><pre><span style='mso-spacerun:yes'>                       </span>D<span style='mso-spacerun:yes'>  </span>5-3<span style='mso-spacerun:yes'>         </span>8-4<span style='mso-spacerun:yes'>   </span>7-6</pre><pre><span style='mso-spacerun:yes'>                       </span>E<span style='mso-spacerun:yes'>  </span>5<span style='mso-spacerun:yes'>           </span>3-4<span style='mso-spacerun:yes'>   </span>8-7-6</pre><pre><span style='mso-spacerun:yes'>                       </span>F<span style='mso-spacerun:yes'>              </span>5-4<span style='mso-spacerun:yes'>   </span>3 | 8-7-6</pre><pre><span style='mso-spacerun:yes'>                       </span>G<span style='mso-spacerun:yes'>              </span>5<span style='mso-spacerun:yes'>     </span>4-3 | 8-7-6</pre><pre><span style='mso-spacerun:yes'>   </span><span style='mso-spacerun:yes'>                    </span>H<span style='mso-spacerun:yes'>                    </span>5-4-3 | 8-7-6</pre><pre><o:p>&nbsp;</o:p></pre><pre><span
style='font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-family:"Times New Roman"'> Прочитав из входного файла очередную запись, мы ищем наименьший ключ,<span style='mso-spacerun:yes'>  </span>который &gt;= последнего считанного. При этом мы, конечно, можем просто сканировать записи в буфере. Однако, если таких записей тысячи, время поиска может оказаться недопустимо большим. Если на этом этапе использовать двоичные деревья, нам понадобится всего лишь log n сравнений.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></pre><pre><b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
style='font-family:"Times New Roman"'><span style='mso-spacerun:yes'>   </span>Реализация<o:p></o:p></span></i></b></pre><pre><span
style='font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-family:"Times New Roman"'> В реализации внешней сортировки на ANSI-C функция makeRuns вызывает readRec<span style='mso-spacerun:yes'>  </span>для чтения очередной записи. В функции readRec используется выбор с<span style='mso-spacerun:yes'>  </span>замещением (с двоичными деревьями) для получения нужной записи, а makeRuns<span style='mso-spacerun:yes'>  </span>распределяет записи согласно ряду Фибоначчи. Если количество отрезков<span style='mso-spacerun:yes'>  </span>оказывается вне последовательности Фибоначчи, в начало каждого файла<span style='mso-spacerun:yes'>  </span>добавляются пустые отрезки. Затем вызывается функция mergeSort, которая<span style='mso-spacerun:yes'>  </span>производит многофазное слияние отрезков.<o:p></o:p></span></pre><pre><span
style='font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'>/* внешняя сортировка */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'>#include &lt;stdio.h&gt;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>#include &lt;stdlib.h&gt;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'>#</span><span lang=EN-US style='font-size:6.0pt;
mso-ansi-language:EN-US'>include</span><span style='font-size:6.0pt'> &lt;</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>string</span><span
style='font-size:6.0pt'>&gt;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'>/* темплейт для временных файлов (формат 8.3) */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>#define FNAME &quot;_sort%03d.dat&quot;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>#define LNAME 13<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>/* </span><span
style='font-size:6.0pt'>операторы</span><span style='font-size:6.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:6.0pt'>сравнения</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>#define compLT(x<span
class=GramE>,y</span>) (x &lt; y)<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'>#define compGT(x<span
class=GramE>,y</span>) (x &gt; y)<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'>/* определяем сортируемые записи */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'>#define LRECL 100<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>typedef</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> int keyType;<o:p></o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>typedef</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> struct recTypeTag {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span><span
style='font-size:6.0pt'>keyType key;<span style='mso-spacerun:yes'>                         </span>/* ключ, по которому сортируем */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>#if LRECL<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>char</span> data[LRECL-sizeof(keyType)];<span style='mso-spacerun:yes'>       </span>/* </span><span
style='font-size:6.0pt'>остальные</span><span style='font-size:6.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:6.0pt'>поля</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>#endif<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>} recType;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>typedef</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> enum {false, true} bool;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>typedef</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> struct tmpFileTag {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>FILE *fp;<span style='mso-spacerun:yes'>            </span><span style='mso-spacerun:yes'>       </span>/* </span><span
style='font-size:6.0pt'>указатель</span><span style='font-size:6.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:6.0pt'>на</span><span
style='font-size:6.0pt;mso-ansi-language:EN-US'> </span><span style='font-size:
6.0pt'>файл</span><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:
EN-US'> */<o:p></o:p></span></pre><pre><span lang=EN-US style='font-size:6.0pt;
mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>char</span> name[LNAME];<span style='mso-spacerun:yes'>           </span>/* </span><span
style='font-size:6.0pt'>имя</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>файла</span><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span><span
style='font-size:6.0pt'>recType rec;<span style='mso-spacerun:yes'>                </span>/* последняя прочитанная запись */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>int dummy;<span style='mso-spacerun:yes'>                  </span>/* номер холостых проходов */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>bool</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> eof;<span style='mso-spacerun:yes'>                   </span>/* </span><span
style='font-size:6.0pt'>флаг</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>конца</span><span
style='font-size:6.0pt;mso-ansi-language:EN-US'> </span><span style='font-size:
6.0pt'>пробега</span><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:
EN-US'> end-of-file */<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>bool</span> eor;<span style='mso-spacerun:yes'>                   </span>/* </span><span
style='font-size:6.0pt'>флаг</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>конца</span><span
style='font-size:6.0pt;mso-ansi-language:EN-US'> </span><span style='font-size:
6.0pt'>прохода</span><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:
EN-US'> end-of-run */<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span><span
style='font-size:6.0pt'>bool valid;<span style='mso-spacerun:yes'>                 </span>/* верно, если запись - годная */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>int fib;<span style='mso-spacerun:yes'>                    </span>/* идеальное число Фибоначчи */<o:p></o:p></span></pre><pre><span
class=GramE><span style='font-size:6.0pt'>} tmpFileType;</span></span><span
style='font-size:6.0pt'><o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span style='font-size:6.0pt'>static tmpFileType **file;<span style='mso-spacerun:yes'>      </span>/* массив информации о временных файлах */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'>static int nTmpFiles;<span style='mso-spacerun:yes'>           </span>/* количество временных файлов */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'>static char *ifName;<span style='mso-spacerun:yes'>            </span>/* имя входного файла */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'>static char *ofName;<span style='mso-spacerun:yes'>            </span>/* имя выходного файла */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'>static int level;<span style='mso-spacerun:yes'>   </span><span style='mso-spacerun:yes'>            </span>/* уровень проходов */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'>static int nNodes;<span style='mso-spacerun:yes'>              </span>/* количество узлов для дерева выбора */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span class=GramE><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> deleteTmpFiles(void) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>int</span> i;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span><span
style='font-size:6.0pt'>/* удалить сливаемые файлы и освободить ресурсы */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> (file) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>for</span> (i = 0; i &lt; nTmpFiles; i++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>if</span> (file[i]) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>if</span> (file[i]-&gt;fp) fclose(file[i]-&gt;fp);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>if</span> (*file[i]-&gt;name) remove(file[i]-&gt;name);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>free</span> (file[i]);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>free</span> (file);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> termTmpFiles(int rc) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>/* </span><span
style='font-size:6.0pt'>очистить</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>файлы</span><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>remove(</span>ofName);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>if</span> (rc == 0) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>int</span> fileT;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span></span><span
style='font-size:6.0pt'>/* file[T] содержит результаты */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>fileT = nTmpFiles - 1;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>fclose(</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>file[fileT]-&gt;fp); file[fileT]-&gt;fp = NULL;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>if</span> (rename(file[fileT]-&gt;name, ofName)) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>perror(</span>&quot;io1&quot;);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>deleteTmpFiles(</span>);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>exit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>*<span
class=GramE>file[</span>fileT]-&gt;name = 0;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>deleteTmpFiles(</span>);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> cleanExit(int rc) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span><span
style='font-size:6.0pt'>/* очистить временные файлы и выйти */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>termTmpFiles(</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>rc);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>  </span><span style='mso-spacerun:yes'>  </span><span
class=GramE>exit(</span>rc);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> *safeMalloc(size_t size) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span><span
style='font-size:6.0pt'>void *p;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>/* Безопасно выделить память и инициализоваться */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> ((p = calloc(1, size)) == NULL) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>printf(</span>&quot;error: malloc failed, size = %d\n&quot;, size);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>cleanExit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>return</span> p;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> initTmpFiles(void) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>int</span> i;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>tmpFileType</span> *fileInfo;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>/* </span><span
style='font-size:6.0pt'>инициализовать</span><span style='font-size:6.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:6.0pt'>файлы</span><span
style='font-size:6.0pt;mso-ansi-language:EN-US'> </span><span style='font-size:
6.0pt'>для</span><span style='font-size:6.0pt;mso-ansi-language:EN-US'> </span><span
style='font-size:6.0pt'>слияния</span><span lang=EN-US style='font-size:6.0pt;
mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>if</span> (nTmpFiles &lt; 3) nTmpFiles = 3;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>file</span> = safeMalloc(nTmpFiles * sizeof(tmpFileType*));<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>fileInfo</span> = safeMalloc(nTmpFiles * sizeof(tmpFileType));<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>for</span> (i = 0; i &lt; nTmpFiles; i++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>file[</span>i] = fileInfo + i;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>sprintf(</span>file[i]-&gt;name, FNAME, i);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>if</span> ((file[i]-&gt;fp = fopen(file[i]-&gt;name, &quot;w+b&quot;)) == NULL) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>perror(</span>&quot;io2&quot;);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>cleanExit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>  </span><span style='mso-spacerun:yes'>  </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>recType</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> *readRec(void) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>typedef</span> struct iNodeTag {<span style='mso-spacerun:yes'>   </span>/* </span><span
style='font-size:6.0pt'>внутренний</span><span style='font-size:6.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:6.0pt'>узел</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>struct</span> iNodeTag *parent;/* </span><span style='font-size:
6.0pt'>предок</span><span style='font-size:6.0pt;mso-ansi-language:EN-US'> </span><span
style='font-size:6.0pt'>внутреннего</span><span style='font-size:6.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:6.0pt'>узла</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>struct</span> eNodeTag *loser; /* </span><span style='font-size:
6.0pt'>внешний</span><span style='font-size:6.0pt;mso-ansi-language:EN-US'> </span><span
style='font-size:6.0pt'>проигравший</span><span lang=EN-US style='font-size:
6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>} iNodeType;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>typedef</span> struct eNodeTag {<span style='mso-spacerun:yes'>  </span><span style='mso-spacerun:yes'> </span>/* </span><span
style='font-size:6.0pt'>внешний</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>узел</span><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>struct</span> iNodeTag *parent;/* </span><span style='font-size:
6.0pt'>предок</span><span style='font-size:6.0pt;mso-ansi-language:EN-US'> </span><span
style='font-size:6.0pt'>внешнего</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>узла</span><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span></span><span
style='font-size:6.0pt'>recType rec;<span style='mso-spacerun:yes'>            </span>/* вводимая запись */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>int run;<span style='mso-spacerun:yes'>                </span>/* номер прохода */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>bool valid;<span style='mso-spacerun:yes'>             </span>/* вводимая запись годна */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>} eNodeType;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>typedef</span> struct nodeTag {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>iNodeType</span> i;<span style='mso-spacerun:yes'>            </span>/* </span><span
style='font-size:6.0pt'>внутренний</span><span style='font-size:6.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:6.0pt'>узел</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>eNodeType</span> e;<span style='mso-spacerun:yes'>            </span>/* </span><span
style='font-size:6.0pt'>внешний</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>узел</span><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>} nodeType;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span><span
style='font-size:6.0pt'>static nodeType *node;<span style='mso-spacerun:yes'>      </span>/* массив узлов дерева выбора */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>static eNodeType *win;<span style='mso-spacerun:yes'>      </span>/* новый победитель */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>static</span></span><span
lang=EN-US style='font-size:6.0pt'> </span><span lang=EN-US style='font-size:
6.0pt;mso-ansi-language:EN-US'>FILE</span><span style='font-size:6.0pt'> *</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>ifp</span><span
style='font-size:6.0pt'>;<span style='mso-spacerun:yes'>           </span>/* входной файл */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>static bool eof;<span style='mso-spacerun:yes'>            </span>/* верно, если конец входного файла */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>static int maxRun;<span style='mso-spacerun:yes'>          </span>/* максимальное число проходов */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>static int curRun;<span style='mso-spacerun:yes'>          </span>/* номер текущего прохода */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>iNodeType *p;<span style='mso-spacerun:yes'>               </span>/* указатель на внутренние узлы */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>static bool lastKeyValid;<span style='mso-spacerun:yes'>   </span>/* верно, если lastKey годен */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>static keyType lastKey;<span style='mso-spacerun:yes'>     </span>/* последний ключ lastKey записан */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>/* Прочитать следующую запись путем выбора с замещением */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>/* Проверка на первый выхов */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span><span
class=GramE>if (node == NULL) {</span><o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> i;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>if</span> (nNodes &lt; 2) nNodes = 2;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>node</span> = safeMalloc(nNodes * sizeof(nodeType));<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>for</span> (i = 0; i &lt; nNodes; i++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span></span><span
lang=PT-BR style='font-size:6.0pt;mso-ansi-language:PT-BR'>node[i].i.loser = &amp;node[i].e;<o:p></o:p></span></pre><pre><span
lang=PT-BR style='font-size:6.0pt;mso-ansi-language:PT-BR'><span style='mso-spacerun:yes'>            </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>node[</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>i].i.parent = &amp;node[i/2].i;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>node[</span>i].e.parent = &amp;node[(nNodes + i)/2].i;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>node[</span>i].e.run = 0;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>node[</span>i].e.valid = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>win</span> = &amp;node[0].e;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>lastKeyValid</span> = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>      </span><span style='mso-spacerun:yes'>  </span><span
class=GramE>if</span> ((ifp = fopen(ifName, &quot;rb&quot;)) == NULL) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>printf(</span>&quot;error: file %s, unable to open\n&quot;, ifName);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span></span><span
style='font-size:6.0pt'>cleanExit(1);<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span><span
class=GramE>while (1) {</span><o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>/* заместить предыдущего победителя новой записью </span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>*/<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>if</span> (!eof) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span><span style='mso-spacerun:yes'>     </span><span
class=GramE>if</span> (fread(&amp;win-&gt;rec, sizeof(recType), 1, ifp) == 1) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>if</span> ((!lastKeyValid || compLT(win-&gt;rec.key, lastKey))<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>&amp;&amp; (++win-&gt;run &gt; maxRun))<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>maxRun</span> = win-&gt;run;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>win</span>-&gt;valid = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>} else if (<span
class=GramE>feof(</span>ifp)) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>fclose(</span>ifp);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>eof</span> = true;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>win</span>-&gt;valid = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>win</span>-&gt;run = maxRun + 1;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>} else {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>perror(</span>&quot;io4&quot;);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>cleanExit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span style='mso-spacerun:yes'>    </span>} else {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>win</span>-&gt;valid = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span></span><span
style='font-size:6.0pt'>win-&gt;run = maxRun + 1;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>/* привести в порядок предков победителя и проигравшего */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>p = win-&gt;parent;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>do</span> {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>bool</span> swap;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>swap</span> = false;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>           </span><span style='mso-spacerun:yes'> </span><span
class=GramE>if</span> (p-&gt;loser-&gt;run &lt; win-&gt;run) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>swap</span> = true;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>} else if (p-&gt;loser-&gt;run == win-&gt;run) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>if</span> (p-&gt;loser-&gt;valid &amp;&amp; win-&gt;valid) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (compLT(p-&gt;loser-&gt;rec.key, win-&gt;rec.key))<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>swap</span> = true;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>} else {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>swap</span> = true;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span></span><span
style='font-size:6.0pt'>}<o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><span style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>            </span><span
class=GramE>if (swap) {</span><o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span>/* p должно быть победителем */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>eNodeType</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> *t;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>t = p-&gt;loser;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>p</span>-&gt;loser = win;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>win</span> = t;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>p = p-&gt;parent;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>} while (<span
class=GramE>p !</span>= &amp;node[0].i);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>/* </span><span
style='font-size:6.0pt'>конец</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span class=GramE><span style='font-size:6.0pt'>прохода</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> ?</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>if</span> (win-&gt;run != curRun) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>/* win-&gt;run = curRun + 1 */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>if</span> (win-&gt;run &gt; maxRun) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> <span style='mso-spacerun:yes'>               </span>/* </span><span
style='font-size:6.0pt'>конец</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>вывода</span><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>free(</span>node);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>return</span> NULL;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span></span><span
style='font-size:6.0pt'>}<o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><span style='mso-spacerun:yes'>            </span>curRun = win-&gt;run;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>/* вывести верх дерева */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> (win-&gt;run) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>lastKey</span> = win-&gt;rec.key;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>lastKeyValid</span> = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>return</span> &amp;win-&gt;rec;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> makeRuns(void) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>recType</span> *win;<span style='mso-spacerun:yes'>       </span>/* </span><span
style='font-size:6.0pt'>победитель</span><span lang=EN-US style='font-size:
6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>int</span></span><span lang=EN-US style='font-size:6.0pt'> </span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>fileT</span><span
style='font-size:6.0pt'>;<span style='mso-spacerun:yes'>          </span>/* прошлый файл */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>int fileP;<span style='mso-spacerun:yes'>          </span>/* <span
class=GramE>следующий</span> за прошлым файлом<span style='mso-spacerun:yes'>  </span>*/<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>int j;<span style='mso-spacerun:yes'>              </span>/* выбираем file[j] */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>/* Сделать инициализационные проходы через выбор с замещением.<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>     </span>* Проходы напианы с использованием распределения Фибоначчи.<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>     </span>*/<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>/* инициализовать файловые структуры */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>fileT = nTmpFiles - 1;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>fileP</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> = fileT - 1;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>for</span> (j = 0; j &lt; fileT; j++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>file[</span>j]-&gt;fib = 1;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>file[</span>j]-&gt;dummy = 1;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>file[</span>fileT]-&gt;fib = 0;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>file[</span>fileT]-&gt;dummy = 0;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>level</span> = 1;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>j = 0;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>win</span> = readRec();<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>while</span> (win) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>bool</span> anyrun;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>anyrun</span> = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>for</span> (j = 0; win &amp;&amp; j &lt;= fileP; j++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>bool</span> run;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>run</span> = false;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>if</span> (file[j]-&gt;valid) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>if</span> (!compLT(win-&gt;key, file[j]-&gt;rec.key)) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span></span><span
style='font-size:6.0pt'>/* добавить к существующему проходу */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'> <span style='mso-spacerun:yes'>                   </span>run = true;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>} else if (file[j<span
class=GramE>]-</span>&gt;dummy) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span></span><span
style='font-size:6.0pt'>/* начать новый проход */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                    </span>file[j]-&gt;dummy--;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                    </span>run = true;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>            </span>} else {<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span>/* первый проход в файле */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>file[</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>j]-&gt;dummy--;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>run</span> = true;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>if</span> (run) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>anyrun</span> = true;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>/* </span><span
style='font-size:6.0pt'>полный</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>проход</span><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>while(</span>1) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (fwrite(win, sizeof(recType), 1, file[j]-&gt;fp) != 1) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>perror(</span>&quot;io3&quot;);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>cleanExit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>file[</span>j]-&gt;rec.key = win-&gt;key;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>file[</span>j]-&gt;valid = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> ((win = readRec()) == NULL) break;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (compLT(win-&gt;key, file[j]-&gt;rec.key)) break;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span></span><span
style='font-size:6.0pt'>}<o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><span style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span>/* Если нет места для проходов - вверх на уровень */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>        </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> (!anyrun) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>int</span> t;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>level</span>++;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>t = <span
class=GramE>file[</span>0]-&gt;fib;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>for</span> (j = 0; j &lt;= fileP; j++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>file[</span>j]-&gt;dummy = t + file[j+1]-&gt;fib - file[j]-&gt;fib;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>file[</span>j]-&gt;fib = t + file[j+1]-&gt;fib;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span></span><span
style='font-size:6.0pt'>}<o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'>}<o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span class=GramE><span
style='font-size:6.0pt'>void rewindFile(int j) {</span></span><span
style='font-size:6.0pt'><o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><span style='mso-spacerun:yes'>    </span>/* Идти в начало file[j] и читать первую запись */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>file[</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>j]-&gt;eor = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>file[</span>j]-&gt;eof = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>rewind(</span>file[j]-&gt;fp);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>if</span> (fread(&amp;file[j]-&gt;rec, sizeof(recType), 1, file[j]-&gt;fp) != 1) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>if</span> (feof(file[j]-&gt;fp)) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>file[</span>j]-&gt;eor = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>file[</span>j]-&gt;eof = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>} else {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>perror(</span>&quot;io5&quot;);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>cleanExit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> mergeSort(void) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>int</span> fileT;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>int</span> fileP;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>int</span> j;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span><span
style='font-size:6.0pt'>tmpFileType *tfile;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>/* Многофазная сортировка слиянием */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>fileT = nTmpFiles - 1;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>fileP = fileT - 1;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>/* снабдить файлы информацией */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> (j = 0; j &lt; fileT; j++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span></span><span
style='font-size:6.0pt'>rewindFile(j);<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>/* Каждый проход по циклу сливает один проход */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>while</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> (level) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>while(</span>1) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>   </span><span style='mso-spacerun:yes'>         </span><span
class=GramE>bool</span> allDummies;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span></span><span
style='font-size:6.0pt'>bool anyRuns;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>            </span>/* сканировать на предмет проходов */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>            </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>allDummies</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>anyRuns</span> = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>for</span> (j = 0; j &lt;= fileP; j++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>if</span> (!file[j]-&gt;dummy) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>           </span><span style='mso-spacerun:yes'>         </span><span
class=GramE>allDummies</span> = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (!file[j]-&gt;eof) anyRuns = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>if</span> (anyRuns) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>int</span> k;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>keyType</span> lastKey;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>/* </span><span
style='font-size:6.0pt'>слить</span><span lang=EN-US style='font-size:6.0pt;
mso-ansi-language:EN-US'> 1 </span><span style='font-size:6.0pt'>проход</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> <span class=GramE>file[</span>0]..<span
class=GramE>file[</span>P] --&gt; </span><span style='font-size:6.0pt'>в</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> file[T] */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>while(</span>1) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                   </span></span><span
style='font-size:6.0pt'>/* Каждый проход по циклу записывает 1 запись в file[fileT]<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'>*/<o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span style='font-size:6.0pt'><span style='mso-spacerun:yes'>                    </span>/* Найти наименьший ключ */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                    </span>k = -1;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>for (j = 0; j &lt;= fileP; j++) {</span><o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>     </span><span style='mso-spacerun:yes'>                   </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> (file[j]-&gt;eor) continue;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>if</span> (file[j]-&gt;dummy) continue;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>if</span> (k &lt; 0 ||<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span>(<span
class=GramE>k !</span>= j &amp;&amp; compGT(file[k]-&gt;rec.key, file[j]-&gt;rec.key)))<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                            </span>k = j;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>   </span><span style='mso-spacerun:yes'>                 </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (k &lt; 0) break;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span>/* </span><span
style='font-size:6.0pt'>записать</span><span lang=EN-US style='font-size:6.0pt;
mso-ansi-language:EN-US'> record[k] </span><span style='font-size:6.0pt'>в</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> <span class=GramE>file[</span>fileT] */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (fwrite(&amp;file[k]-&gt;rec, sizeof(recType), 1,<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                            </span><span
class=GramE>file[</span>fileT]-&gt;fp) != 1) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span style='mso-spacerun:yes'>    </span><span
class=GramE>perror(</span>&quot;io6&quot;);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>cleanExit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span>/* </span><span
style='font-size:6.0pt'>заменить</span><span lang=EN-US style='font-size:6.0pt;
mso-ansi-language:EN-US'> record[k] */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>lastKey</span> = file[k]-&gt;rec.key;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (fread(&amp;file[k]-&gt;rec, sizeof(recType), 1,<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                  </span><span style='mso-spacerun:yes'>          </span></span><span
class=GramE><span style='font-size:6.0pt'>file[k]-&gt;fp) == 1) {</span></span><span
style='font-size:6.0pt'><o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><span style='mso-spacerun:yes'>                        </span>/* проверить на предмет конца пробега file[s] */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                        </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>if</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> (compLT(file[k]-&gt;rec.key, lastKey))<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                            </span><span
class=GramE>file[</span>k]-&gt;eor = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span>} else if (<span
class=GramE>feof(</span>file[k]-&gt;fp)) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>file[</span>k]-&gt;eof = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>file[</span>k]-&gt;eor = true;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span>} else {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>perror(</span>&quot;io7&quot;);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span><span
class=GramE>cleanExit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>       </span><span style='mso-spacerun:yes'>         </span>/* </span><span
style='font-size:6.0pt'>Подкорректировкать</span><span style='font-size:6.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:6.0pt'>холостые</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>for</span> (j = 0; j &lt;= fileP; j++) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (file[j]-&gt;dummy) file[j]-&gt;dummy--;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (!file[j]-&gt;eof) file[j]-&gt;eor = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>} else if (allDummies) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>for</span> (j = 0; j &lt;= fileP; j++)<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>file[</span>j]-&gt;dummy--;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>file[</span>fileT]-&gt;dummy++;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>/* </span><span
style='font-size:6.0pt'>конец</span><span style='font-size:6.0pt;mso-ansi-language:
EN-US'> </span><span style='font-size:6.0pt'>прохода</span><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'> */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span><span
class=GramE>if</span> (file[fileP]-&gt;eof &amp;&amp; !file[fileP]-&gt;dummy) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>/* completed a fibonocci-level */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>level--</span>;<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span></span><span
class=GramE><span style='font-size:6.0pt'>if (!level) {</span></span><span
style='font-size:6.0pt'><o:p></o:p></span></pre><pre><span style='font-size:
6.0pt'><span style='mso-spacerun:yes'>                    </span>/* готово, file[fileT] содержит данные */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                    </span>return;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span>}<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span>/* fileP истощился, открываем новый такой же */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>fclose(</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>file[fileP]-&gt;fp);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>if</span> ((file[fileP]-&gt;fp = fopen(file[fileP]-&gt;name, &quot;w+b&quot;))<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                        </span>== NULL) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>perror(</span>&quot;io8&quot;);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>cleanExit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>file[</span>fileP]-&gt;eof = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>file[</span>fileP]-&gt;eor = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>rewindFile(</span>fileT);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span>/* f[0],f[1]...,f[fileT] &lt;-- f[fileT],f[0]...,f[T-1] */<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>tfile</span> = file[fileT];<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span><span
class=GramE>memmove(</span>file + 1, file, fileT * sizeof(tmpFileType*));<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                </span></span><span
style='font-size:6.0pt'>file[0] = tfile;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><o:p>&nbsp;</o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span>/* начать новые проходы */<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>                </span></span><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>for</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> (j = 0; j &lt;= fileP; j++)<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>                    </span><span
class=GramE>if</span> (!file[j]-&gt;eof) file[j]-&gt;eor = false;<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>            </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>void</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> extSort(void) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>initTmpFiles(</span>);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>makeRuns(</span>);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>mergeSort(</span>);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>termTmpFiles(</span>0);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
class=GramE><span lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>int</span></span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'> main(int argc, char *argv[]) {<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>/* </span><span
style='font-size:6.0pt'>командная</span><span style='font-size:6.0pt;
mso-ansi-language:EN-US'> </span><span style='font-size:6.0pt'>строка</span><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'>:<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span>*<span style='mso-spacerun:yes'>   </span><span
class=GramE>ext</span> ifName ofName nTmpFiles nNodes<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span>*<span style='mso-spacerun:yes'>   </span><span
class=GramE>ext</span> in.dat out.dat 5 2000<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>     </span></span><span
style='font-size:6.0pt'>*<span style='mso-spacerun:yes'>       </span>читает in.dat, сортирует, используя 5 файлов и 2000 узлов,<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>     </span>*<span style='mso-spacerun:yes'>        </span>выводит в out.dat<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>     </span>*/<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'><span style='mso-spacerun:yes'>    </span>if (argc<span
class=GramE> !</span>= </span><span lang=EN-US style='font-size:6.0pt;
mso-ansi-language:EN-US'>5) {<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>printf(</span>&quot;%s ifName ofName nTmpFiles nNodes\n&quot;, argv[0]);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>cleanExit(</span>1);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span>}<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>ifName</span> = argv[1];<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>ofName</span> = argv[2];<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>nTmpFiles</span> = atoi(argv[3]);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>nNodes</span> = atoi(argv[4]);<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>printf(</span>&quot;extSort: nFiles=%d, nNodes=%d, lrecl=%d\n&quot;,<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>        </span><span
class=GramE>nTmpFiles</span>, nNodes, sizeof(recType));<o:p></o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span><span
class=GramE>extSort(</span>);<o:p></o:p></span></pre><pre><span lang=EN-US
style='font-size:6.0pt;mso-ansi-language:EN-US'><o:p>&nbsp;</o:p></span></pre><pre><span
lang=EN-US style='font-size:6.0pt;mso-ansi-language:EN-US'><span style='mso-spacerun:yes'>    </span></span><span
style='font-size:6.0pt'>return 0;<o:p></o:p></span></pre><pre><span
style='font-size:6.0pt'>}<o:p></o:p></span></pre>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=a0><span style='font-size:9.0pt'><o:p>&nbsp;</o:p></span></p>

<h4><o:p>&nbsp;</o:p></h4>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
